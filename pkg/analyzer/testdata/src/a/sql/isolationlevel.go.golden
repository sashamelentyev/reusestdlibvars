// Code generated by usestdlibvars, DO NOT EDIT.

package sql_test

var (
	_ = sql.LevelReadCommitted.String() // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = sql.LevelReadUncommitted.String() // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = sql.LevelRepeatableRead.String() // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = sql.LevelWriteCommitted.String() // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
)

const (
	_ = sql.LevelReadCommitted.String() // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = sql.LevelReadUncommitted.String() // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = sql.LevelRepeatableRead.String() // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = sql.LevelWriteCommitted.String() // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
)

var (
	_ = func(s string)string{return s}(sql.LevelReadCommitted.String()) // want `"Read Committed" can be replaced by sql\.LevelReadCommitted\.String\(\)`
	_ = func(s string)string{return s}(sql.LevelReadUncommitted.String()) // want `"Read Uncommitted" can be replaced by sql\.LevelReadUncommitted\.String\(\)`
	_ = func(s string)string{return s}(sql.LevelRepeatableRead.String()) // want `"Repeatable Read" can be replaced by sql\.LevelRepeatableRead\.String\(\)`
	_ = func(s string)string{return s}(sql.LevelWriteCommitted.String()) // want `"Write Committed" can be replaced by sql\.LevelWriteCommitted\.String\(\)`
)
