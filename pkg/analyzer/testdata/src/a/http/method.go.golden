// Code generated by usestdlibvars, DO NOT EDIT.

package http_test

import (
    "net/http"
    "net/http/httptest"
)

var (
	_ = "CONNECT"
	_ = "DELETE"
	_ = "GET"
	_ = "HEAD"
	_ = "OPTIONS"
	_ = "PATCH"
	_ = "POST"
	_ = "PUT"
	_ = "TRACE"
)

const (
	_ = "CONNECT"
	_ = "DELETE"
	_ = "GET"
	_ = "HEAD"
	_ = "OPTIONS"
	_ = "PATCH"
	_ = "POST"
	_ = "PUT"
	_ = "TRACE"
)

var (
	_, _ = http.NewRequest(http.MethodConnect, "", http.NoBody) // want `"CONNECT" can be replaced by http\.MethodConnect`
	_, _ = http.NewRequest(http.MethodDelete, "", http.NoBody) // want `"DELETE" can be replaced by http\.MethodDelete`
	_, _ = http.NewRequest(http.MethodGet, "", http.NoBody) // want `"GET" can be replaced by http\.MethodGet`
	_, _ = http.NewRequest(http.MethodHead, "", http.NoBody) // want `"HEAD" can be replaced by http\.MethodHead`
	_, _ = http.NewRequest(http.MethodOptions, "", http.NoBody) // want `"OPTIONS" can be replaced by http\.MethodOptions`
	_, _ = http.NewRequest(http.MethodPatch, "", http.NoBody) // want `"PATCH" can be replaced by http\.MethodPatch`
	_, _ = http.NewRequest(http.MethodPost, "", http.NoBody) // want `"POST" can be replaced by http\.MethodPost`
	_, _ = http.NewRequest(http.MethodPut, "", http.NoBody) // want `"PUT" can be replaced by http\.MethodPut`
	_, _ = http.NewRequest(http.MethodTrace, "", http.NoBody) // want `"TRACE" can be replaced by http\.MethodTrace`
)

var (
	_, _ = http.NewRequestWithContext(nil, http.MethodConnect, "", http.NoBody) // want `"CONNECT" can be replaced by http\.MethodConnect`
	_, _ = http.NewRequestWithContext(nil, http.MethodDelete, "", http.NoBody) // want `"DELETE" can be replaced by http\.MethodDelete`
	_, _ = http.NewRequestWithContext(nil, http.MethodGet, "", http.NoBody) // want `"GET" can be replaced by http\.MethodGet`
	_, _ = http.NewRequestWithContext(nil, http.MethodHead, "", http.NoBody) // want `"HEAD" can be replaced by http\.MethodHead`
	_, _ = http.NewRequestWithContext(nil, http.MethodOptions, "", http.NoBody) // want `"OPTIONS" can be replaced by http\.MethodOptions`
	_, _ = http.NewRequestWithContext(nil, http.MethodPatch, "", http.NoBody) // want `"PATCH" can be replaced by http\.MethodPatch`
	_, _ = http.NewRequestWithContext(nil, http.MethodPost, "", http.NoBody) // want `"POST" can be replaced by http\.MethodPost`
	_, _ = http.NewRequestWithContext(nil, http.MethodPut, "", http.NoBody) // want `"PUT" can be replaced by http\.MethodPut`
	_, _ = http.NewRequestWithContext(nil, http.MethodTrace, "", http.NoBody) // want `"TRACE" can be replaced by http\.MethodTrace`
)

var (
	_ = http.Request{Method: http.MethodConnect} // want `"CONNECT" can be replaced by http\.MethodConnect`
	_ = http.Request{Method: http.MethodDelete} // want `"DELETE" can be replaced by http\.MethodDelete`
	_ = http.Request{Method: http.MethodGet} // want `"GET" can be replaced by http\.MethodGet`
	_ = http.Request{Method: http.MethodHead} // want `"HEAD" can be replaced by http\.MethodHead`
	_ = http.Request{Method: http.MethodOptions} // want `"OPTIONS" can be replaced by http\.MethodOptions`
	_ = http.Request{Method: http.MethodPatch} // want `"PATCH" can be replaced by http\.MethodPatch`
	_ = http.Request{Method: http.MethodPost} // want `"POST" can be replaced by http\.MethodPost`
	_ = http.Request{Method: http.MethodPut} // want `"PUT" can be replaced by http\.MethodPut`
	_ = http.Request{Method: http.MethodTrace} // want `"TRACE" can be replaced by http\.MethodTrace`
)

var (
	_ = &http.Request{Method: http.MethodConnect} // want `"CONNECT" can be replaced by http\.MethodConnect`
	_ = &http.Request{Method: http.MethodDelete} // want `"DELETE" can be replaced by http\.MethodDelete`
	_ = &http.Request{Method: http.MethodGet} // want `"GET" can be replaced by http\.MethodGet`
	_ = &http.Request{Method: http.MethodHead} // want `"HEAD" can be replaced by http\.MethodHead`
	_ = &http.Request{Method: http.MethodOptions} // want `"OPTIONS" can be replaced by http\.MethodOptions`
	_ = &http.Request{Method: http.MethodPatch} // want `"PATCH" can be replaced by http\.MethodPatch`
	_ = &http.Request{Method: http.MethodPost} // want `"POST" can be replaced by http\.MethodPost`
	_ = &http.Request{Method: http.MethodPut} // want `"PUT" can be replaced by http\.MethodPut`
	_ = &http.Request{Method: http.MethodTrace} // want `"TRACE" can be replaced by http\.MethodTrace`
)

func _() error {
    resp, err := http.DefaultClient.Do(&http.Request{})
    if err != nil {
        return err
    }
    defer func() { _ = resp.Body.Close() }()
    if resp.Request.Method == http.MethodConnect { // want `"CONNECT" can be replaced by http\.MethodConnect`
        return nil
    }
    if resp.Request.Method == http.MethodDelete { // want `"DELETE" can be replaced by http\.MethodDelete`
        return nil
    }
    if resp.Request.Method == http.MethodGet { // want `"GET" can be replaced by http\.MethodGet`
        return nil
    }
    if resp.Request.Method == http.MethodHead { // want `"HEAD" can be replaced by http\.MethodHead`
        return nil
    }
    if resp.Request.Method == http.MethodOptions { // want `"OPTIONS" can be replaced by http\.MethodOptions`
        return nil
    }
    if resp.Request.Method == http.MethodPatch { // want `"PATCH" can be replaced by http\.MethodPatch`
        return nil
    }
    if resp.Request.Method == http.MethodPost { // want `"POST" can be replaced by http\.MethodPost`
        return nil
    }
    if resp.Request.Method == http.MethodPut { // want `"PUT" can be replaced by http\.MethodPut`
        return nil
    }
    if resp.Request.Method == http.MethodTrace { // want `"TRACE" can be replaced by http\.MethodTrace`
        return nil
    }
    for resp.Request.Method == http.MethodConnect { // want `"CONNECT" can be replaced by http\.MethodConnect`
        return nil
    }
    for resp.Request.Method == http.MethodDelete { // want `"DELETE" can be replaced by http\.MethodDelete`
        return nil
    }
    for resp.Request.Method == http.MethodGet { // want `"GET" can be replaced by http\.MethodGet`
        return nil
    }
    for resp.Request.Method == http.MethodHead { // want `"HEAD" can be replaced by http\.MethodHead`
        return nil
    }
    for resp.Request.Method == http.MethodOptions { // want `"OPTIONS" can be replaced by http\.MethodOptions`
        return nil
    }
    for resp.Request.Method == http.MethodPatch { // want `"PATCH" can be replaced by http\.MethodPatch`
        return nil
    }
    for resp.Request.Method == http.MethodPost { // want `"POST" can be replaced by http\.MethodPost`
        return nil
    }
    for resp.Request.Method == http.MethodPut { // want `"PUT" can be replaced by http\.MethodPut`
        return nil
    }
    for resp.Request.Method == http.MethodTrace { // want `"TRACE" can be replaced by http\.MethodTrace`
        return nil
    }
    return nil
}

func _() error {
    resp, err := http.DefaultClient.Do(&http.Request{})
    if err != nil {
        return err
    }
    defer func() { _ = resp.Body.Close() }()
    if resp.Request.Method == http.MethodConnect {
        return nil
    }
    if resp.Request.Method == http.MethodDelete {
        return nil
    }
    if resp.Request.Method == http.MethodGet {
        return nil
    }
    if resp.Request.Method == http.MethodHead {
        return nil
    }
    if resp.Request.Method == http.MethodOptions {
        return nil
    }
    if resp.Request.Method == http.MethodPatch {
        return nil
    }
    if resp.Request.Method == http.MethodPost {
        return nil
    }
    if resp.Request.Method == http.MethodPut {
        return nil
    }
    if resp.Request.Method == http.MethodTrace {
        return nil
    }
    for resp.Request.Method == http.MethodConnect {
        return nil
    }
    for resp.Request.Method == http.MethodDelete {
        return nil
    }
    for resp.Request.Method == http.MethodGet {
        return nil
    }
    for resp.Request.Method == http.MethodHead {
        return nil
    }
    for resp.Request.Method == http.MethodOptions {
        return nil
    }
    for resp.Request.Method == http.MethodPatch {
        return nil
    }
    for resp.Request.Method == http.MethodPost {
        return nil
    }
    for resp.Request.Method == http.MethodPut {
        return nil
    }
    for resp.Request.Method == http.MethodTrace {
        return nil
    }
    return nil
}

func _() {
    var r http.Request
    switch r.Method {
    case http.MethodConnect: // want `"CONNECT" can be replaced by http\.MethodConnect`
      return
    case http.MethodDelete: // want `"DELETE" can be replaced by http\.MethodDelete`
      return
    case http.MethodGet: // want `"GET" can be replaced by http\.MethodGet`
      return
    case http.MethodHead: // want `"HEAD" can be replaced by http\.MethodHead`
      return
    case http.MethodOptions: // want `"OPTIONS" can be replaced by http\.MethodOptions`
      return
    case http.MethodPatch: // want `"PATCH" can be replaced by http\.MethodPatch`
      return
    case http.MethodPost: // want `"POST" can be replaced by http\.MethodPost`
      return
    case http.MethodPut: // want `"PUT" can be replaced by http\.MethodPut`
      return
    case http.MethodTrace: // want `"TRACE" can be replaced by http\.MethodTrace`
      return
    }
}

func _() {
    var r http.Request
    switch r.Method {
    case http.MethodConnect:
      return
    case http.MethodDelete:
      return
    case http.MethodGet:
      return
    case http.MethodHead:
      return
    case http.MethodOptions:
      return
    case http.MethodPatch:
      return
    case http.MethodPost:
      return
    case http.MethodPut:
      return
    case http.MethodTrace:
      return
    }
}

func _() {
    var r http.Request
    switch {
    case r.Method == http.MethodConnect: // want `"CONNECT" can be replaced by http\.MethodConnect`
      return
    case r.Method == http.MethodDelete: // want `"DELETE" can be replaced by http\.MethodDelete`
      return
    case r.Method == http.MethodGet: // want `"GET" can be replaced by http\.MethodGet`
      return
    case r.Method == http.MethodHead: // want `"HEAD" can be replaced by http\.MethodHead`
      return
    case r.Method == http.MethodOptions: // want `"OPTIONS" can be replaced by http\.MethodOptions`
      return
    case r.Method == http.MethodPatch: // want `"PATCH" can be replaced by http\.MethodPatch`
      return
    case r.Method == http.MethodPost: // want `"POST" can be replaced by http\.MethodPost`
      return
    case r.Method == http.MethodPut: // want `"PUT" can be replaced by http\.MethodPut`
      return
    case r.Method == http.MethodTrace: // want `"TRACE" can be replaced by http\.MethodTrace`
      return
    }
}

func _() {
    var r http.Request
    switch {
    case r.Method == http.MethodConnect:
      return
    case r.Method == http.MethodDelete:
      return
    case r.Method == http.MethodGet:
      return
    case r.Method == http.MethodHead:
      return
    case r.Method == http.MethodOptions:
      return
    case r.Method == http.MethodPatch:
      return
    case r.Method == http.MethodPost:
      return
    case r.Method == http.MethodPut:
      return
    case r.Method == http.MethodTrace:
      return
    }
}

var (
	_ = httptest.NewRequest(http.MethodConnect, "", http.NoBody) // want `"CONNECT" can be replaced by http\.MethodConnect`
	_ = httptest.NewRequest(http.MethodDelete, "", http.NoBody) // want `"DELETE" can be replaced by http\.MethodDelete`
	_ = httptest.NewRequest(http.MethodGet, "", http.NoBody) // want `"GET" can be replaced by http\.MethodGet`
	_ = httptest.NewRequest(http.MethodHead, "", http.NoBody) // want `"HEAD" can be replaced by http\.MethodHead`
	_ = httptest.NewRequest(http.MethodOptions, "", http.NoBody) // want `"OPTIONS" can be replaced by http\.MethodOptions`
	_ = httptest.NewRequest(http.MethodPatch, "", http.NoBody) // want `"PATCH" can be replaced by http\.MethodPatch`
	_ = httptest.NewRequest(http.MethodPost, "", http.NoBody) // want `"POST" can be replaced by http\.MethodPost`
	_ = httptest.NewRequest(http.MethodPut, "", http.NoBody) // want `"PUT" can be replaced by http\.MethodPut`
	_ = httptest.NewRequest(http.MethodTrace, "", http.NoBody) // want `"TRACE" can be replaced by http\.MethodTrace`
)
