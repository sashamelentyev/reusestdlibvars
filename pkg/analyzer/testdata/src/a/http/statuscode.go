// Code generated by usestdlibvars, DO NOT EDIT.

package http_test

import "net/http"

var (
	_ = 100
	_ = 101
	_ = 102
	_ = 103
	_ = 200
	_ = 201
	_ = 202
	_ = 203
	_ = 204
	_ = 205
	_ = 206
	_ = 207
	_ = 208
	_ = 226
	_ = 300
	_ = 301
	_ = 302
	_ = 303
	_ = 304
	_ = 305
	_ = 307
	_ = 308
	_ = 400
	_ = 401
	_ = 402
	_ = 403
	_ = 404
	_ = 405
	_ = 406
	_ = 407
	_ = 408
	_ = 409
	_ = 410
	_ = 411
	_ = 412
	_ = 413
	_ = 414
	_ = 415
	_ = 416
	_ = 417
	_ = 418
	_ = 421
	_ = 422
	_ = 423
	_ = 424
	_ = 425
	_ = 426
	_ = 428
	_ = 429
	_ = 431
	_ = 451
	_ = 500
	_ = 501
	_ = 502
	_ = 503
	_ = 504
	_ = 505
	_ = 506
	_ = 507
	_ = 508
	_ = 510
	_ = 511
)

const (
	_ = 100
	_ = 101
	_ = 102
	_ = 103
	_ = 200
	_ = 201
	_ = 202
	_ = 203
	_ = 204
	_ = 205
	_ = 206
	_ = 207
	_ = 208
	_ = 226
	_ = 300
	_ = 301
	_ = 302
	_ = 303
	_ = 304
	_ = 305
	_ = 307
	_ = 308
	_ = 400
	_ = 401
	_ = 402
	_ = 403
	_ = 404
	_ = 405
	_ = 406
	_ = 407
	_ = 408
	_ = 409
	_ = 410
	_ = 411
	_ = 412
	_ = 413
	_ = 414
	_ = 415
	_ = 416
	_ = 417
	_ = 418
	_ = 421
	_ = 422
	_ = 423
	_ = 424
	_ = 425
	_ = 426
	_ = 428
	_ = 429
	_ = 431
	_ = 451
	_ = 500
	_ = 501
	_ = 502
	_ = 503
	_ = 504
	_ = 505
	_ = 506
	_ = 507
	_ = 508
	_ = 510
	_ = 511
)

func _() {
	var w http.ResponseWriter
	w.WriteHeader(100) // want `"100" can be replaced by http\.StatusContinue`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(101) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(102) // want `"102" can be replaced by http\.StatusProcessing`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(103) // want `"103" can be replaced by http\.StatusEarlyHints`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(200) // want `"200" can be replaced by http\.StatusOK`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(201) // want `"201" can be replaced by http\.StatusCreated`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(202) // want `"202" can be replaced by http\.StatusAccepted`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(203) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(204) // want `"204" can be replaced by http\.StatusNoContent`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(205) // want `"205" can be replaced by http\.StatusResetContent`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(206) // want `"206" can be replaced by http\.StatusPartialContent`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(207) // want `"207" can be replaced by http\.StatusMultiStatus`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(208) // want `"208" can be replaced by http\.StatusAlreadyReported`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(226) // want `"226" can be replaced by http\.StatusIMUsed`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(300) // want `"300" can be replaced by http\.StatusMultipleChoices`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(301) // want `"301" can be replaced by http\.StatusMovedPermanently`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(302) // want `"302" can be replaced by http\.StatusFound`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(303) // want `"303" can be replaced by http\.StatusSeeOther`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(304) // want `"304" can be replaced by http\.StatusNotModified`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(305) // want `"305" can be replaced by http\.StatusUseProxy`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(307) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(308) // want `"308" can be replaced by http\.StatusPermanentRedirect`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(400) // want `"400" can be replaced by http\.StatusBadRequest`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(401) // want `"401" can be replaced by http\.StatusUnauthorized`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(402) // want `"402" can be replaced by http\.StatusPaymentRequired`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(403) // want `"403" can be replaced by http\.StatusForbidden`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(404) // want `"404" can be replaced by http\.StatusNotFound`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(405) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(406) // want `"406" can be replaced by http\.StatusNotAcceptable`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(407) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(408) // want `"408" can be replaced by http\.StatusRequestTimeout`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(409) // want `"409" can be replaced by http\.StatusConflict`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(410) // want `"410" can be replaced by http\.StatusGone`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(411) // want `"411" can be replaced by http\.StatusLengthRequired`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(412) // want `"412" can be replaced by http\.StatusPreconditionFailed`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(413) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(414) // want `"414" can be replaced by http\.StatusRequestURITooLong`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(415) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(416) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(417) // want `"417" can be replaced by http\.StatusExpectationFailed`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(418) // want `"418" can be replaced by http\.StatusTeapot`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(421) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(422) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(423) // want `"423" can be replaced by http\.StatusLocked`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(424) // want `"424" can be replaced by http\.StatusFailedDependency`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(425) // want `"425" can be replaced by http\.StatusTooEarly`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(426) // want `"426" can be replaced by http\.StatusUpgradeRequired`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(428) // want `"428" can be replaced by http\.StatusPreconditionRequired`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(429) // want `"429" can be replaced by http\.StatusTooManyRequests`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(431) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(451) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(500) // want `"500" can be replaced by http\.StatusInternalServerError`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(501) // want `"501" can be replaced by http\.StatusNotImplemented`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(502) // want `"502" can be replaced by http\.StatusBadGateway`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(503) // want `"503" can be replaced by http\.StatusServiceUnavailable`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(504) // want `"504" can be replaced by http\.StatusGatewayTimeout`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(505) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(506) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(507) // want `"507" can be replaced by http\.StatusInsufficientStorage`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(508) // want `"508" can be replaced by http\.StatusLoopDetected`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(510) // want `"510" can be replaced by http\.StatusNotExtended`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(511) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
}

func _() {
	_ = &http.Response{
		StatusCode: 100, // want `"100" can be replaced by http\.StatusContinue`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 101, // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 102, // want `"102" can be replaced by http\.StatusProcessing`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 103, // want `"103" can be replaced by http\.StatusEarlyHints`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 200, // want `"200" can be replaced by http\.StatusOK`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 201, // want `"201" can be replaced by http\.StatusCreated`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 202, // want `"202" can be replaced by http\.StatusAccepted`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 203, // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 204, // want `"204" can be replaced by http\.StatusNoContent`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 205, // want `"205" can be replaced by http\.StatusResetContent`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 206, // want `"206" can be replaced by http\.StatusPartialContent`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 207, // want `"207" can be replaced by http\.StatusMultiStatus`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 208, // want `"208" can be replaced by http\.StatusAlreadyReported`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 226, // want `"226" can be replaced by http\.StatusIMUsed`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 300, // want `"300" can be replaced by http\.StatusMultipleChoices`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 301, // want `"301" can be replaced by http\.StatusMovedPermanently`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 302, // want `"302" can be replaced by http\.StatusFound`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 303, // want `"303" can be replaced by http\.StatusSeeOther`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 304, // want `"304" can be replaced by http\.StatusNotModified`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 305, // want `"305" can be replaced by http\.StatusUseProxy`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 307, // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 308, // want `"308" can be replaced by http\.StatusPermanentRedirect`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 400, // want `"400" can be replaced by http\.StatusBadRequest`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 401, // want `"401" can be replaced by http\.StatusUnauthorized`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 402, // want `"402" can be replaced by http\.StatusPaymentRequired`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 403, // want `"403" can be replaced by http\.StatusForbidden`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 404, // want `"404" can be replaced by http\.StatusNotFound`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 405, // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 406, // want `"406" can be replaced by http\.StatusNotAcceptable`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 407, // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 408, // want `"408" can be replaced by http\.StatusRequestTimeout`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 409, // want `"409" can be replaced by http\.StatusConflict`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 410, // want `"410" can be replaced by http\.StatusGone`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 411, // want `"411" can be replaced by http\.StatusLengthRequired`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 412, // want `"412" can be replaced by http\.StatusPreconditionFailed`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 413, // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 414, // want `"414" can be replaced by http\.StatusRequestURITooLong`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 415, // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 416, // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 417, // want `"417" can be replaced by http\.StatusExpectationFailed`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 418, // want `"418" can be replaced by http\.StatusTeapot`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 421, // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 422, // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 423, // want `"423" can be replaced by http\.StatusLocked`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 424, // want `"424" can be replaced by http\.StatusFailedDependency`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 425, // want `"425" can be replaced by http\.StatusTooEarly`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 426, // want `"426" can be replaced by http\.StatusUpgradeRequired`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 428, // want `"428" can be replaced by http\.StatusPreconditionRequired`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 429, // want `"429" can be replaced by http\.StatusTooManyRequests`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 431, // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 451, // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 500, // want `"500" can be replaced by http\.StatusInternalServerError`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 501, // want `"501" can be replaced by http\.StatusNotImplemented`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 502, // want `"502" can be replaced by http\.StatusBadGateway`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 503, // want `"503" can be replaced by http\.StatusServiceUnavailable`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 504, // want `"504" can be replaced by http\.StatusGatewayTimeout`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 505, // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 506, // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 507, // want `"507" can be replaced by http\.StatusInsufficientStorage`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 508, // want `"508" can be replaced by http\.StatusLoopDetected`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 510, // want `"510" can be replaced by http\.StatusNotExtended`
	}
}

func _() {
	_ = &http.Response{
		StatusCode: 511, // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
	}
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 100 { // want `"100" can be replaced by http\.StatusContinue`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 101 { // want `"101" can be replaced by http\.StatusSwitchingProtocols`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 102 { // want `"102" can be replaced by http\.StatusProcessing`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 103 { // want `"103" can be replaced by http\.StatusEarlyHints`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 200 { // want `"200" can be replaced by http\.StatusOK`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 201 { // want `"201" can be replaced by http\.StatusCreated`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 202 { // want `"202" can be replaced by http\.StatusAccepted`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 203 { // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 204 { // want `"204" can be replaced by http\.StatusNoContent`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 205 { // want `"205" can be replaced by http\.StatusResetContent`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 206 { // want `"206" can be replaced by http\.StatusPartialContent`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 207 { // want `"207" can be replaced by http\.StatusMultiStatus`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 208 { // want `"208" can be replaced by http\.StatusAlreadyReported`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 226 { // want `"226" can be replaced by http\.StatusIMUsed`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 300 { // want `"300" can be replaced by http\.StatusMultipleChoices`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 301 { // want `"301" can be replaced by http\.StatusMovedPermanently`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 302 { // want `"302" can be replaced by http\.StatusFound`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 303 { // want `"303" can be replaced by http\.StatusSeeOther`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 304 { // want `"304" can be replaced by http\.StatusNotModified`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 305 { // want `"305" can be replaced by http\.StatusUseProxy`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 307 { // want `"307" can be replaced by http\.StatusTemporaryRedirect`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 308 { // want `"308" can be replaced by http\.StatusPermanentRedirect`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 400 { // want `"400" can be replaced by http\.StatusBadRequest`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 401 { // want `"401" can be replaced by http\.StatusUnauthorized`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 402 { // want `"402" can be replaced by http\.StatusPaymentRequired`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 403 { // want `"403" can be replaced by http\.StatusForbidden`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 404 { // want `"404" can be replaced by http\.StatusNotFound`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 405 { // want `"405" can be replaced by http\.StatusMethodNotAllowed`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 406 { // want `"406" can be replaced by http\.StatusNotAcceptable`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 407 { // want `"407" can be replaced by http\.StatusProxyAuthRequired`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 408 { // want `"408" can be replaced by http\.StatusRequestTimeout`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 409 { // want `"409" can be replaced by http\.StatusConflict`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 410 { // want `"410" can be replaced by http\.StatusGone`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 411 { // want `"411" can be replaced by http\.StatusLengthRequired`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 412 { // want `"412" can be replaced by http\.StatusPreconditionFailed`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 413 { // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 414 { // want `"414" can be replaced by http\.StatusRequestURITooLong`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 415 { // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 416 { // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 417 { // want `"417" can be replaced by http\.StatusExpectationFailed`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 418 { // want `"418" can be replaced by http\.StatusTeapot`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 421 { // want `"421" can be replaced by http\.StatusMisdirectedRequest`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 422 { // want `"422" can be replaced by http\.StatusUnprocessableEntity`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 423 { // want `"423" can be replaced by http\.StatusLocked`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 424 { // want `"424" can be replaced by http\.StatusFailedDependency`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 425 { // want `"425" can be replaced by http\.StatusTooEarly`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 426 { // want `"426" can be replaced by http\.StatusUpgradeRequired`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 428 { // want `"428" can be replaced by http\.StatusPreconditionRequired`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 429 { // want `"429" can be replaced by http\.StatusTooManyRequests`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 431 { // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 451 { // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 500 { // want `"500" can be replaced by http\.StatusInternalServerError`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 501 { // want `"501" can be replaced by http\.StatusNotImplemented`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 502 { // want `"502" can be replaced by http\.StatusBadGateway`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 503 { // want `"503" can be replaced by http\.StatusServiceUnavailable`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 504 { // want `"504" can be replaced by http\.StatusGatewayTimeout`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 505 { // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 506 { // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 507 { // want `"507" can be replaced by http\.StatusInsufficientStorage`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 508 { // want `"508" can be replaced by http\.StatusLoopDetected`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 510 { // want `"510" can be replaced by http\.StatusNotExtended`
		return nil
	}
	return nil
}

func _() error {
	resp, err := http.DefaultClient.Do(&http.Request{})
	if err != nil {
		return err
	}
	defer func() { _ = resp.Body.Close() }()
	if resp.StatusCode == 511 { // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
		return nil
	}
	return nil
}
