// Code generated by usestdlibvars, DO NOT EDIT.

package http_test

import (
    "net/http"
    "net/http/httptest"
)

var (
	_ = 100
	_ = 101
	_ = 102
	_ = 103
	_ = 200
	_ = 201
	_ = 202
	_ = 203
	_ = 204
	_ = 205
	_ = 206
	_ = 207
	_ = 208
	_ = 226
	_ = 300
	_ = 301
	_ = 302
	_ = 303
	_ = 304
	_ = 305
	_ = 307
	_ = 308
	_ = 400
	_ = 401
	_ = 402
	_ = 403
	_ = 404
	_ = 405
	_ = 406
	_ = 407
	_ = 408
	_ = 409
	_ = 410
	_ = 411
	_ = 412
	_ = 413
	_ = 414
	_ = 415
	_ = 416
	_ = 417
	_ = 418
	_ = 421
	_ = 422
	_ = 423
	_ = 424
	_ = 425
	_ = 426
	_ = 428
	_ = 429
	_ = 431
	_ = 451
	_ = 500
	_ = 501
	_ = 502
	_ = 503
	_ = 504
	_ = 505
	_ = 506
	_ = 507
	_ = 508
	_ = 510
	_ = 511
)

const (
	_ = 100
	_ = 101
	_ = 102
	_ = 103
	_ = 200
	_ = 201
	_ = 202
	_ = 203
	_ = 204
	_ = 205
	_ = 206
	_ = 207
	_ = 208
	_ = 226
	_ = 300
	_ = 301
	_ = 302
	_ = 303
	_ = 304
	_ = 305
	_ = 307
	_ = 308
	_ = 400
	_ = 401
	_ = 402
	_ = 403
	_ = 404
	_ = 405
	_ = 406
	_ = 407
	_ = 408
	_ = 409
	_ = 410
	_ = 411
	_ = 412
	_ = 413
	_ = 414
	_ = 415
	_ = 416
	_ = 417
	_ = 418
	_ = 421
	_ = 422
	_ = 423
	_ = 424
	_ = 425
	_ = 426
	_ = 428
	_ = 429
	_ = 431
	_ = 451
	_ = 500
	_ = 501
	_ = 502
	_ = 503
	_ = 504
	_ = 505
	_ = 506
	_ = 507
	_ = 508
	_ = 510
	_ = 511
)

func _() {
	var w http.ResponseWriter
	w.WriteHeader(http.StatusContinue) // want `"100" can be replaced by http\.StatusContinue`
	w.WriteHeader(http.StatusSwitchingProtocols) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	w.WriteHeader(http.StatusProcessing) // want `"102" can be replaced by http\.StatusProcessing`
	w.WriteHeader(http.StatusEarlyHints) // want `"103" can be replaced by http\.StatusEarlyHints`
	w.WriteHeader(http.StatusOK) // want `"200" can be replaced by http\.StatusOK`
	w.WriteHeader(http.StatusCreated) // want `"201" can be replaced by http\.StatusCreated`
	w.WriteHeader(http.StatusAccepted) // want `"202" can be replaced by http\.StatusAccepted`
	w.WriteHeader(http.StatusNonAuthoritativeInfo) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	w.WriteHeader(http.StatusNoContent) // want `"204" can be replaced by http\.StatusNoContent`
	w.WriteHeader(http.StatusResetContent) // want `"205" can be replaced by http\.StatusResetContent`
	w.WriteHeader(http.StatusPartialContent) // want `"206" can be replaced by http\.StatusPartialContent`
	w.WriteHeader(http.StatusMultiStatus) // want `"207" can be replaced by http\.StatusMultiStatus`
	w.WriteHeader(http.StatusAlreadyReported) // want `"208" can be replaced by http\.StatusAlreadyReported`
	w.WriteHeader(http.StatusIMUsed) // want `"226" can be replaced by http\.StatusIMUsed`
	w.WriteHeader(http.StatusMultipleChoices) // want `"300" can be replaced by http\.StatusMultipleChoices`
	w.WriteHeader(http.StatusMovedPermanently) // want `"301" can be replaced by http\.StatusMovedPermanently`
	w.WriteHeader(http.StatusFound) // want `"302" can be replaced by http\.StatusFound`
	w.WriteHeader(http.StatusSeeOther) // want `"303" can be replaced by http\.StatusSeeOther`
	w.WriteHeader(http.StatusNotModified) // want `"304" can be replaced by http\.StatusNotModified`
	w.WriteHeader(http.StatusUseProxy) // want `"305" can be replaced by http\.StatusUseProxy`
	w.WriteHeader(http.StatusTemporaryRedirect) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	w.WriteHeader(http.StatusPermanentRedirect) // want `"308" can be replaced by http\.StatusPermanentRedirect`
	w.WriteHeader(http.StatusBadRequest) // want `"400" can be replaced by http\.StatusBadRequest`
	w.WriteHeader(http.StatusUnauthorized) // want `"401" can be replaced by http\.StatusUnauthorized`
	w.WriteHeader(http.StatusPaymentRequired) // want `"402" can be replaced by http\.StatusPaymentRequired`
	w.WriteHeader(http.StatusForbidden) // want `"403" can be replaced by http\.StatusForbidden`
	w.WriteHeader(http.StatusNotFound) // want `"404" can be replaced by http\.StatusNotFound`
	w.WriteHeader(http.StatusMethodNotAllowed) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	w.WriteHeader(http.StatusNotAcceptable) // want `"406" can be replaced by http\.StatusNotAcceptable`
	w.WriteHeader(http.StatusProxyAuthRequired) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	w.WriteHeader(http.StatusRequestTimeout) // want `"408" can be replaced by http\.StatusRequestTimeout`
	w.WriteHeader(http.StatusConflict) // want `"409" can be replaced by http\.StatusConflict`
	w.WriteHeader(http.StatusGone) // want `"410" can be replaced by http\.StatusGone`
	w.WriteHeader(http.StatusLengthRequired) // want `"411" can be replaced by http\.StatusLengthRequired`
	w.WriteHeader(http.StatusPreconditionFailed) // want `"412" can be replaced by http\.StatusPreconditionFailed`
	w.WriteHeader(http.StatusRequestEntityTooLarge) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	w.WriteHeader(http.StatusRequestURITooLong) // want `"414" can be replaced by http\.StatusRequestURITooLong`
	w.WriteHeader(http.StatusUnsupportedMediaType) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	w.WriteHeader(http.StatusRequestedRangeNotSatisfiable) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	w.WriteHeader(http.StatusExpectationFailed) // want `"417" can be replaced by http\.StatusExpectationFailed`
	w.WriteHeader(http.StatusTeapot) // want `"418" can be replaced by http\.StatusTeapot`
	w.WriteHeader(http.StatusMisdirectedRequest) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	w.WriteHeader(http.StatusUnprocessableEntity) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	w.WriteHeader(http.StatusLocked) // want `"423" can be replaced by http\.StatusLocked`
	w.WriteHeader(http.StatusFailedDependency) // want `"424" can be replaced by http\.StatusFailedDependency`
	w.WriteHeader(http.StatusTooEarly) // want `"425" can be replaced by http\.StatusTooEarly`
	w.WriteHeader(http.StatusUpgradeRequired) // want `"426" can be replaced by http\.StatusUpgradeRequired`
	w.WriteHeader(http.StatusPreconditionRequired) // want `"428" can be replaced by http\.StatusPreconditionRequired`
	w.WriteHeader(http.StatusTooManyRequests) // want `"429" can be replaced by http\.StatusTooManyRequests`
	w.WriteHeader(http.StatusRequestHeaderFieldsTooLarge) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	w.WriteHeader(http.StatusUnavailableForLegalReasons) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	w.WriteHeader(http.StatusInternalServerError) // want `"500" can be replaced by http\.StatusInternalServerError`
	w.WriteHeader(http.StatusNotImplemented) // want `"501" can be replaced by http\.StatusNotImplemented`
	w.WriteHeader(http.StatusBadGateway) // want `"502" can be replaced by http\.StatusBadGateway`
	w.WriteHeader(http.StatusServiceUnavailable) // want `"503" can be replaced by http\.StatusServiceUnavailable`
	w.WriteHeader(http.StatusGatewayTimeout) // want `"504" can be replaced by http\.StatusGatewayTimeout`
	w.WriteHeader(http.StatusHTTPVersionNotSupported) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	w.WriteHeader(http.StatusVariantAlsoNegotiates) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	w.WriteHeader(http.StatusInsufficientStorage) // want `"507" can be replaced by http\.StatusInsufficientStorage`
	w.WriteHeader(http.StatusLoopDetected) // want `"508" can be replaced by http\.StatusLoopDetected`
	w.WriteHeader(http.StatusNotExtended) // want `"510" can be replaced by http\.StatusNotExtended`
	w.WriteHeader(http.StatusNetworkAuthenticationRequired) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
}

func _() {
	var w http.ResponseWriter
	w.WriteHeader(http.StatusContinue)
	w.WriteHeader(http.StatusSwitchingProtocols)
	w.WriteHeader(http.StatusProcessing)
	w.WriteHeader(http.StatusEarlyHints)
	w.WriteHeader(http.StatusOK)
	w.WriteHeader(http.StatusCreated)
	w.WriteHeader(http.StatusAccepted)
	w.WriteHeader(http.StatusNonAuthoritativeInfo)
	w.WriteHeader(http.StatusNoContent)
	w.WriteHeader(http.StatusResetContent)
	w.WriteHeader(http.StatusPartialContent)
	w.WriteHeader(http.StatusMultiStatus)
	w.WriteHeader(http.StatusAlreadyReported)
	w.WriteHeader(http.StatusIMUsed)
	w.WriteHeader(http.StatusMultipleChoices)
	w.WriteHeader(http.StatusMovedPermanently)
	w.WriteHeader(http.StatusFound)
	w.WriteHeader(http.StatusSeeOther)
	w.WriteHeader(http.StatusNotModified)
	w.WriteHeader(http.StatusUseProxy)
	w.WriteHeader(http.StatusTemporaryRedirect)
	w.WriteHeader(http.StatusPermanentRedirect)
	w.WriteHeader(http.StatusBadRequest)
	w.WriteHeader(http.StatusUnauthorized)
	w.WriteHeader(http.StatusPaymentRequired)
	w.WriteHeader(http.StatusForbidden)
	w.WriteHeader(http.StatusNotFound)
	w.WriteHeader(http.StatusMethodNotAllowed)
	w.WriteHeader(http.StatusNotAcceptable)
	w.WriteHeader(http.StatusProxyAuthRequired)
	w.WriteHeader(http.StatusRequestTimeout)
	w.WriteHeader(http.StatusConflict)
	w.WriteHeader(http.StatusGone)
	w.WriteHeader(http.StatusLengthRequired)
	w.WriteHeader(http.StatusPreconditionFailed)
	w.WriteHeader(http.StatusRequestEntityTooLarge)
	w.WriteHeader(http.StatusRequestURITooLong)
	w.WriteHeader(http.StatusUnsupportedMediaType)
	w.WriteHeader(http.StatusRequestedRangeNotSatisfiable)
	w.WriteHeader(http.StatusExpectationFailed)
	w.WriteHeader(http.StatusTeapot)
	w.WriteHeader(http.StatusMisdirectedRequest)
	w.WriteHeader(http.StatusUnprocessableEntity)
	w.WriteHeader(http.StatusLocked)
	w.WriteHeader(http.StatusFailedDependency)
	w.WriteHeader(http.StatusTooEarly)
	w.WriteHeader(http.StatusUpgradeRequired)
	w.WriteHeader(http.StatusPreconditionRequired)
	w.WriteHeader(http.StatusTooManyRequests)
	w.WriteHeader(http.StatusRequestHeaderFieldsTooLarge)
	w.WriteHeader(http.StatusUnavailableForLegalReasons)
	w.WriteHeader(http.StatusInternalServerError)
	w.WriteHeader(http.StatusNotImplemented)
	w.WriteHeader(http.StatusBadGateway)
	w.WriteHeader(http.StatusServiceUnavailable)
	w.WriteHeader(http.StatusGatewayTimeout)
	w.WriteHeader(http.StatusHTTPVersionNotSupported)
	w.WriteHeader(http.StatusVariantAlsoNegotiates)
	w.WriteHeader(http.StatusInsufficientStorage)
	w.WriteHeader(http.StatusLoopDetected)
	w.WriteHeader(http.StatusNotExtended)
	w.WriteHeader(http.StatusNetworkAuthenticationRequired)
}

var (
	_ = http.Response{StatusCode: http.StatusContinue} // want `"100" can be replaced by http\.StatusContinue`
	_ = http.Response{StatusCode: http.StatusSwitchingProtocols} // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	_ = http.Response{StatusCode: http.StatusProcessing} // want `"102" can be replaced by http\.StatusProcessing`
	_ = http.Response{StatusCode: http.StatusEarlyHints} // want `"103" can be replaced by http\.StatusEarlyHints`
	_ = http.Response{StatusCode: http.StatusOK} // want `"200" can be replaced by http\.StatusOK`
	_ = http.Response{StatusCode: http.StatusCreated} // want `"201" can be replaced by http\.StatusCreated`
	_ = http.Response{StatusCode: http.StatusAccepted} // want `"202" can be replaced by http\.StatusAccepted`
	_ = http.Response{StatusCode: http.StatusNonAuthoritativeInfo} // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	_ = http.Response{StatusCode: http.StatusNoContent} // want `"204" can be replaced by http\.StatusNoContent`
	_ = http.Response{StatusCode: http.StatusResetContent} // want `"205" can be replaced by http\.StatusResetContent`
	_ = http.Response{StatusCode: http.StatusPartialContent} // want `"206" can be replaced by http\.StatusPartialContent`
	_ = http.Response{StatusCode: http.StatusMultiStatus} // want `"207" can be replaced by http\.StatusMultiStatus`
	_ = http.Response{StatusCode: http.StatusAlreadyReported} // want `"208" can be replaced by http\.StatusAlreadyReported`
	_ = http.Response{StatusCode: http.StatusIMUsed} // want `"226" can be replaced by http\.StatusIMUsed`
	_ = http.Response{StatusCode: http.StatusMultipleChoices} // want `"300" can be replaced by http\.StatusMultipleChoices`
	_ = http.Response{StatusCode: http.StatusMovedPermanently} // want `"301" can be replaced by http\.StatusMovedPermanently`
	_ = http.Response{StatusCode: http.StatusFound} // want `"302" can be replaced by http\.StatusFound`
	_ = http.Response{StatusCode: http.StatusSeeOther} // want `"303" can be replaced by http\.StatusSeeOther`
	_ = http.Response{StatusCode: http.StatusNotModified} // want `"304" can be replaced by http\.StatusNotModified`
	_ = http.Response{StatusCode: http.StatusUseProxy} // want `"305" can be replaced by http\.StatusUseProxy`
	_ = http.Response{StatusCode: http.StatusTemporaryRedirect} // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	_ = http.Response{StatusCode: http.StatusPermanentRedirect} // want `"308" can be replaced by http\.StatusPermanentRedirect`
	_ = http.Response{StatusCode: http.StatusBadRequest} // want `"400" can be replaced by http\.StatusBadRequest`
	_ = http.Response{StatusCode: http.StatusUnauthorized} // want `"401" can be replaced by http\.StatusUnauthorized`
	_ = http.Response{StatusCode: http.StatusPaymentRequired} // want `"402" can be replaced by http\.StatusPaymentRequired`
	_ = http.Response{StatusCode: http.StatusForbidden} // want `"403" can be replaced by http\.StatusForbidden`
	_ = http.Response{StatusCode: http.StatusNotFound} // want `"404" can be replaced by http\.StatusNotFound`
	_ = http.Response{StatusCode: http.StatusMethodNotAllowed} // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	_ = http.Response{StatusCode: http.StatusNotAcceptable} // want `"406" can be replaced by http\.StatusNotAcceptable`
	_ = http.Response{StatusCode: http.StatusProxyAuthRequired} // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	_ = http.Response{StatusCode: http.StatusRequestTimeout} // want `"408" can be replaced by http\.StatusRequestTimeout`
	_ = http.Response{StatusCode: http.StatusConflict} // want `"409" can be replaced by http\.StatusConflict`
	_ = http.Response{StatusCode: http.StatusGone} // want `"410" can be replaced by http\.StatusGone`
	_ = http.Response{StatusCode: http.StatusLengthRequired} // want `"411" can be replaced by http\.StatusLengthRequired`
	_ = http.Response{StatusCode: http.StatusPreconditionFailed} // want `"412" can be replaced by http\.StatusPreconditionFailed`
	_ = http.Response{StatusCode: http.StatusRequestEntityTooLarge} // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	_ = http.Response{StatusCode: http.StatusRequestURITooLong} // want `"414" can be replaced by http\.StatusRequestURITooLong`
	_ = http.Response{StatusCode: http.StatusUnsupportedMediaType} // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	_ = http.Response{StatusCode: http.StatusRequestedRangeNotSatisfiable} // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	_ = http.Response{StatusCode: http.StatusExpectationFailed} // want `"417" can be replaced by http\.StatusExpectationFailed`
	_ = http.Response{StatusCode: http.StatusTeapot} // want `"418" can be replaced by http\.StatusTeapot`
	_ = http.Response{StatusCode: http.StatusMisdirectedRequest} // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	_ = http.Response{StatusCode: http.StatusUnprocessableEntity} // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	_ = http.Response{StatusCode: http.StatusLocked} // want `"423" can be replaced by http\.StatusLocked`
	_ = http.Response{StatusCode: http.StatusFailedDependency} // want `"424" can be replaced by http\.StatusFailedDependency`
	_ = http.Response{StatusCode: http.StatusTooEarly} // want `"425" can be replaced by http\.StatusTooEarly`
	_ = http.Response{StatusCode: http.StatusUpgradeRequired} // want `"426" can be replaced by http\.StatusUpgradeRequired`
	_ = http.Response{StatusCode: http.StatusPreconditionRequired} // want `"428" can be replaced by http\.StatusPreconditionRequired`
	_ = http.Response{StatusCode: http.StatusTooManyRequests} // want `"429" can be replaced by http\.StatusTooManyRequests`
	_ = http.Response{StatusCode: http.StatusRequestHeaderFieldsTooLarge} // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	_ = http.Response{StatusCode: http.StatusUnavailableForLegalReasons} // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	_ = http.Response{StatusCode: http.StatusInternalServerError} // want `"500" can be replaced by http\.StatusInternalServerError`
	_ = http.Response{StatusCode: http.StatusNotImplemented} // want `"501" can be replaced by http\.StatusNotImplemented`
	_ = http.Response{StatusCode: http.StatusBadGateway} // want `"502" can be replaced by http\.StatusBadGateway`
	_ = http.Response{StatusCode: http.StatusServiceUnavailable} // want `"503" can be replaced by http\.StatusServiceUnavailable`
	_ = http.Response{StatusCode: http.StatusGatewayTimeout} // want `"504" can be replaced by http\.StatusGatewayTimeout`
	_ = http.Response{StatusCode: http.StatusHTTPVersionNotSupported} // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	_ = http.Response{StatusCode: http.StatusVariantAlsoNegotiates} // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	_ = http.Response{StatusCode: http.StatusInsufficientStorage} // want `"507" can be replaced by http\.StatusInsufficientStorage`
	_ = http.Response{StatusCode: http.StatusLoopDetected} // want `"508" can be replaced by http\.StatusLoopDetected`
	_ = http.Response{StatusCode: http.StatusNotExtended} // want `"510" can be replaced by http\.StatusNotExtended`
	_ = http.Response{StatusCode: http.StatusNetworkAuthenticationRequired} // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
	_ = http.Response{StatusCode: http.StatusContinue}
	_ = http.Response{StatusCode: http.StatusSwitchingProtocols}
	_ = http.Response{StatusCode: http.StatusProcessing}
	_ = http.Response{StatusCode: http.StatusEarlyHints}
	_ = http.Response{StatusCode: http.StatusOK}
	_ = http.Response{StatusCode: http.StatusCreated}
	_ = http.Response{StatusCode: http.StatusAccepted}
	_ = http.Response{StatusCode: http.StatusNonAuthoritativeInfo}
	_ = http.Response{StatusCode: http.StatusNoContent}
	_ = http.Response{StatusCode: http.StatusResetContent}
	_ = http.Response{StatusCode: http.StatusPartialContent}
	_ = http.Response{StatusCode: http.StatusMultiStatus}
	_ = http.Response{StatusCode: http.StatusAlreadyReported}
	_ = http.Response{StatusCode: http.StatusIMUsed}
	_ = http.Response{StatusCode: http.StatusMultipleChoices}
	_ = http.Response{StatusCode: http.StatusMovedPermanently}
	_ = http.Response{StatusCode: http.StatusFound}
	_ = http.Response{StatusCode: http.StatusSeeOther}
	_ = http.Response{StatusCode: http.StatusNotModified}
	_ = http.Response{StatusCode: http.StatusUseProxy}
	_ = http.Response{StatusCode: http.StatusTemporaryRedirect}
	_ = http.Response{StatusCode: http.StatusPermanentRedirect}
	_ = http.Response{StatusCode: http.StatusBadRequest}
	_ = http.Response{StatusCode: http.StatusUnauthorized}
	_ = http.Response{StatusCode: http.StatusPaymentRequired}
	_ = http.Response{StatusCode: http.StatusForbidden}
	_ = http.Response{StatusCode: http.StatusNotFound}
	_ = http.Response{StatusCode: http.StatusMethodNotAllowed}
	_ = http.Response{StatusCode: http.StatusNotAcceptable}
	_ = http.Response{StatusCode: http.StatusProxyAuthRequired}
	_ = http.Response{StatusCode: http.StatusRequestTimeout}
	_ = http.Response{StatusCode: http.StatusConflict}
	_ = http.Response{StatusCode: http.StatusGone}
	_ = http.Response{StatusCode: http.StatusLengthRequired}
	_ = http.Response{StatusCode: http.StatusPreconditionFailed}
	_ = http.Response{StatusCode: http.StatusRequestEntityTooLarge}
	_ = http.Response{StatusCode: http.StatusRequestURITooLong}
	_ = http.Response{StatusCode: http.StatusUnsupportedMediaType}
	_ = http.Response{StatusCode: http.StatusRequestedRangeNotSatisfiable}
	_ = http.Response{StatusCode: http.StatusExpectationFailed}
	_ = http.Response{StatusCode: http.StatusTeapot}
	_ = http.Response{StatusCode: http.StatusMisdirectedRequest}
	_ = http.Response{StatusCode: http.StatusUnprocessableEntity}
	_ = http.Response{StatusCode: http.StatusLocked}
	_ = http.Response{StatusCode: http.StatusFailedDependency}
	_ = http.Response{StatusCode: http.StatusTooEarly}
	_ = http.Response{StatusCode: http.StatusUpgradeRequired}
	_ = http.Response{StatusCode: http.StatusPreconditionRequired}
	_ = http.Response{StatusCode: http.StatusTooManyRequests}
	_ = http.Response{StatusCode: http.StatusRequestHeaderFieldsTooLarge}
	_ = http.Response{StatusCode: http.StatusUnavailableForLegalReasons}
	_ = http.Response{StatusCode: http.StatusInternalServerError}
	_ = http.Response{StatusCode: http.StatusNotImplemented}
	_ = http.Response{StatusCode: http.StatusBadGateway}
	_ = http.Response{StatusCode: http.StatusServiceUnavailable}
	_ = http.Response{StatusCode: http.StatusGatewayTimeout}
	_ = http.Response{StatusCode: http.StatusHTTPVersionNotSupported}
	_ = http.Response{StatusCode: http.StatusVariantAlsoNegotiates}
	_ = http.Response{StatusCode: http.StatusInsufficientStorage}
	_ = http.Response{StatusCode: http.StatusLoopDetected}
	_ = http.Response{StatusCode: http.StatusNotExtended}
	_ = http.Response{StatusCode: http.StatusNetworkAuthenticationRequired}
)

var (
	_ = &http.Response{StatusCode: http.StatusContinue} // want `"100" can be replaced by http\.StatusContinue`
	_ = &http.Response{StatusCode: http.StatusSwitchingProtocols} // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	_ = &http.Response{StatusCode: http.StatusProcessing} // want `"102" can be replaced by http\.StatusProcessing`
	_ = &http.Response{StatusCode: http.StatusEarlyHints} // want `"103" can be replaced by http\.StatusEarlyHints`
	_ = &http.Response{StatusCode: http.StatusOK} // want `"200" can be replaced by http\.StatusOK`
	_ = &http.Response{StatusCode: http.StatusCreated} // want `"201" can be replaced by http\.StatusCreated`
	_ = &http.Response{StatusCode: http.StatusAccepted} // want `"202" can be replaced by http\.StatusAccepted`
	_ = &http.Response{StatusCode: http.StatusNonAuthoritativeInfo} // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	_ = &http.Response{StatusCode: http.StatusNoContent} // want `"204" can be replaced by http\.StatusNoContent`
	_ = &http.Response{StatusCode: http.StatusResetContent} // want `"205" can be replaced by http\.StatusResetContent`
	_ = &http.Response{StatusCode: http.StatusPartialContent} // want `"206" can be replaced by http\.StatusPartialContent`
	_ = &http.Response{StatusCode: http.StatusMultiStatus} // want `"207" can be replaced by http\.StatusMultiStatus`
	_ = &http.Response{StatusCode: http.StatusAlreadyReported} // want `"208" can be replaced by http\.StatusAlreadyReported`
	_ = &http.Response{StatusCode: http.StatusIMUsed} // want `"226" can be replaced by http\.StatusIMUsed`
	_ = &http.Response{StatusCode: http.StatusMultipleChoices} // want `"300" can be replaced by http\.StatusMultipleChoices`
	_ = &http.Response{StatusCode: http.StatusMovedPermanently} // want `"301" can be replaced by http\.StatusMovedPermanently`
	_ = &http.Response{StatusCode: http.StatusFound} // want `"302" can be replaced by http\.StatusFound`
	_ = &http.Response{StatusCode: http.StatusSeeOther} // want `"303" can be replaced by http\.StatusSeeOther`
	_ = &http.Response{StatusCode: http.StatusNotModified} // want `"304" can be replaced by http\.StatusNotModified`
	_ = &http.Response{StatusCode: http.StatusUseProxy} // want `"305" can be replaced by http\.StatusUseProxy`
	_ = &http.Response{StatusCode: http.StatusTemporaryRedirect} // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	_ = &http.Response{StatusCode: http.StatusPermanentRedirect} // want `"308" can be replaced by http\.StatusPermanentRedirect`
	_ = &http.Response{StatusCode: http.StatusBadRequest} // want `"400" can be replaced by http\.StatusBadRequest`
	_ = &http.Response{StatusCode: http.StatusUnauthorized} // want `"401" can be replaced by http\.StatusUnauthorized`
	_ = &http.Response{StatusCode: http.StatusPaymentRequired} // want `"402" can be replaced by http\.StatusPaymentRequired`
	_ = &http.Response{StatusCode: http.StatusForbidden} // want `"403" can be replaced by http\.StatusForbidden`
	_ = &http.Response{StatusCode: http.StatusNotFound} // want `"404" can be replaced by http\.StatusNotFound`
	_ = &http.Response{StatusCode: http.StatusMethodNotAllowed} // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	_ = &http.Response{StatusCode: http.StatusNotAcceptable} // want `"406" can be replaced by http\.StatusNotAcceptable`
	_ = &http.Response{StatusCode: http.StatusProxyAuthRequired} // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	_ = &http.Response{StatusCode: http.StatusRequestTimeout} // want `"408" can be replaced by http\.StatusRequestTimeout`
	_ = &http.Response{StatusCode: http.StatusConflict} // want `"409" can be replaced by http\.StatusConflict`
	_ = &http.Response{StatusCode: http.StatusGone} // want `"410" can be replaced by http\.StatusGone`
	_ = &http.Response{StatusCode: http.StatusLengthRequired} // want `"411" can be replaced by http\.StatusLengthRequired`
	_ = &http.Response{StatusCode: http.StatusPreconditionFailed} // want `"412" can be replaced by http\.StatusPreconditionFailed`
	_ = &http.Response{StatusCode: http.StatusRequestEntityTooLarge} // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	_ = &http.Response{StatusCode: http.StatusRequestURITooLong} // want `"414" can be replaced by http\.StatusRequestURITooLong`
	_ = &http.Response{StatusCode: http.StatusUnsupportedMediaType} // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	_ = &http.Response{StatusCode: http.StatusRequestedRangeNotSatisfiable} // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	_ = &http.Response{StatusCode: http.StatusExpectationFailed} // want `"417" can be replaced by http\.StatusExpectationFailed`
	_ = &http.Response{StatusCode: http.StatusTeapot} // want `"418" can be replaced by http\.StatusTeapot`
	_ = &http.Response{StatusCode: http.StatusMisdirectedRequest} // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	_ = &http.Response{StatusCode: http.StatusUnprocessableEntity} // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	_ = &http.Response{StatusCode: http.StatusLocked} // want `"423" can be replaced by http\.StatusLocked`
	_ = &http.Response{StatusCode: http.StatusFailedDependency} // want `"424" can be replaced by http\.StatusFailedDependency`
	_ = &http.Response{StatusCode: http.StatusTooEarly} // want `"425" can be replaced by http\.StatusTooEarly`
	_ = &http.Response{StatusCode: http.StatusUpgradeRequired} // want `"426" can be replaced by http\.StatusUpgradeRequired`
	_ = &http.Response{StatusCode: http.StatusPreconditionRequired} // want `"428" can be replaced by http\.StatusPreconditionRequired`
	_ = &http.Response{StatusCode: http.StatusTooManyRequests} // want `"429" can be replaced by http\.StatusTooManyRequests`
	_ = &http.Response{StatusCode: http.StatusRequestHeaderFieldsTooLarge} // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	_ = &http.Response{StatusCode: http.StatusUnavailableForLegalReasons} // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	_ = &http.Response{StatusCode: http.StatusInternalServerError} // want `"500" can be replaced by http\.StatusInternalServerError`
	_ = &http.Response{StatusCode: http.StatusNotImplemented} // want `"501" can be replaced by http\.StatusNotImplemented`
	_ = &http.Response{StatusCode: http.StatusBadGateway} // want `"502" can be replaced by http\.StatusBadGateway`
	_ = &http.Response{StatusCode: http.StatusServiceUnavailable} // want `"503" can be replaced by http\.StatusServiceUnavailable`
	_ = &http.Response{StatusCode: http.StatusGatewayTimeout} // want `"504" can be replaced by http\.StatusGatewayTimeout`
	_ = &http.Response{StatusCode: http.StatusHTTPVersionNotSupported} // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	_ = &http.Response{StatusCode: http.StatusVariantAlsoNegotiates} // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	_ = &http.Response{StatusCode: http.StatusInsufficientStorage} // want `"507" can be replaced by http\.StatusInsufficientStorage`
	_ = &http.Response{StatusCode: http.StatusLoopDetected} // want `"508" can be replaced by http\.StatusLoopDetected`
	_ = &http.Response{StatusCode: http.StatusNotExtended} // want `"510" can be replaced by http\.StatusNotExtended`
	_ = &http.Response{StatusCode: http.StatusNetworkAuthenticationRequired} // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
	_ = &http.Response{StatusCode: http.StatusContinue}
	_ = &http.Response{StatusCode: http.StatusSwitchingProtocols}
	_ = &http.Response{StatusCode: http.StatusProcessing}
	_ = &http.Response{StatusCode: http.StatusEarlyHints}
	_ = &http.Response{StatusCode: http.StatusOK}
	_ = &http.Response{StatusCode: http.StatusCreated}
	_ = &http.Response{StatusCode: http.StatusAccepted}
	_ = &http.Response{StatusCode: http.StatusNonAuthoritativeInfo}
	_ = &http.Response{StatusCode: http.StatusNoContent}
	_ = &http.Response{StatusCode: http.StatusResetContent}
	_ = &http.Response{StatusCode: http.StatusPartialContent}
	_ = &http.Response{StatusCode: http.StatusMultiStatus}
	_ = &http.Response{StatusCode: http.StatusAlreadyReported}
	_ = &http.Response{StatusCode: http.StatusIMUsed}
	_ = &http.Response{StatusCode: http.StatusMultipleChoices}
	_ = &http.Response{StatusCode: http.StatusMovedPermanently}
	_ = &http.Response{StatusCode: http.StatusFound}
	_ = &http.Response{StatusCode: http.StatusSeeOther}
	_ = &http.Response{StatusCode: http.StatusNotModified}
	_ = &http.Response{StatusCode: http.StatusUseProxy}
	_ = &http.Response{StatusCode: http.StatusTemporaryRedirect}
	_ = &http.Response{StatusCode: http.StatusPermanentRedirect}
	_ = &http.Response{StatusCode: http.StatusBadRequest}
	_ = &http.Response{StatusCode: http.StatusUnauthorized}
	_ = &http.Response{StatusCode: http.StatusPaymentRequired}
	_ = &http.Response{StatusCode: http.StatusForbidden}
	_ = &http.Response{StatusCode: http.StatusNotFound}
	_ = &http.Response{StatusCode: http.StatusMethodNotAllowed}
	_ = &http.Response{StatusCode: http.StatusNotAcceptable}
	_ = &http.Response{StatusCode: http.StatusProxyAuthRequired}
	_ = &http.Response{StatusCode: http.StatusRequestTimeout}
	_ = &http.Response{StatusCode: http.StatusConflict}
	_ = &http.Response{StatusCode: http.StatusGone}
	_ = &http.Response{StatusCode: http.StatusLengthRequired}
	_ = &http.Response{StatusCode: http.StatusPreconditionFailed}
	_ = &http.Response{StatusCode: http.StatusRequestEntityTooLarge}
	_ = &http.Response{StatusCode: http.StatusRequestURITooLong}
	_ = &http.Response{StatusCode: http.StatusUnsupportedMediaType}
	_ = &http.Response{StatusCode: http.StatusRequestedRangeNotSatisfiable}
	_ = &http.Response{StatusCode: http.StatusExpectationFailed}
	_ = &http.Response{StatusCode: http.StatusTeapot}
	_ = &http.Response{StatusCode: http.StatusMisdirectedRequest}
	_ = &http.Response{StatusCode: http.StatusUnprocessableEntity}
	_ = &http.Response{StatusCode: http.StatusLocked}
	_ = &http.Response{StatusCode: http.StatusFailedDependency}
	_ = &http.Response{StatusCode: http.StatusTooEarly}
	_ = &http.Response{StatusCode: http.StatusUpgradeRequired}
	_ = &http.Response{StatusCode: http.StatusPreconditionRequired}
	_ = &http.Response{StatusCode: http.StatusTooManyRequests}
	_ = &http.Response{StatusCode: http.StatusRequestHeaderFieldsTooLarge}
	_ = &http.Response{StatusCode: http.StatusUnavailableForLegalReasons}
	_ = &http.Response{StatusCode: http.StatusInternalServerError}
	_ = &http.Response{StatusCode: http.StatusNotImplemented}
	_ = &http.Response{StatusCode: http.StatusBadGateway}
	_ = &http.Response{StatusCode: http.StatusServiceUnavailable}
	_ = &http.Response{StatusCode: http.StatusGatewayTimeout}
	_ = &http.Response{StatusCode: http.StatusHTTPVersionNotSupported}
	_ = &http.Response{StatusCode: http.StatusVariantAlsoNegotiates}
	_ = &http.Response{StatusCode: http.StatusInsufficientStorage}
	_ = &http.Response{StatusCode: http.StatusLoopDetected}
	_ = &http.Response{StatusCode: http.StatusNotExtended}
	_ = &http.Response{StatusCode: http.StatusNetworkAuthenticationRequired}
)

func _() error {
    resp, err := http.DefaultClient.Do(&http.Request{})
    if err != nil {
        return err
    }
    defer func() { _ = resp.Body.Close() }()
    if resp.StatusCode == http.StatusContinue { // want `"100" can be replaced by http\.StatusContinue`
        return nil
    } else if resp.StatusCode == http.StatusContinue { // want `"100" can be replaced by http\.StatusContinue`
        return nil
    } else if false || resp.StatusCode == http.StatusContinue { // want `"100" can be replaced by http\.StatusContinue`
        return nil
    }
    if resp.StatusCode == http.StatusSwitchingProtocols { // want `"101" can be replaced by http\.StatusSwitchingProtocols`
        return nil
    } else if resp.StatusCode == http.StatusSwitchingProtocols { // want `"101" can be replaced by http\.StatusSwitchingProtocols`
        return nil
    } else if false || resp.StatusCode == http.StatusSwitchingProtocols { // want `"101" can be replaced by http\.StatusSwitchingProtocols`
        return nil
    }
    if resp.StatusCode == http.StatusProcessing { // want `"102" can be replaced by http\.StatusProcessing`
        return nil
    } else if resp.StatusCode == http.StatusProcessing { // want `"102" can be replaced by http\.StatusProcessing`
        return nil
    } else if false || resp.StatusCode == http.StatusProcessing { // want `"102" can be replaced by http\.StatusProcessing`
        return nil
    }
    if resp.StatusCode == http.StatusEarlyHints { // want `"103" can be replaced by http\.StatusEarlyHints`
        return nil
    } else if resp.StatusCode == http.StatusEarlyHints { // want `"103" can be replaced by http\.StatusEarlyHints`
        return nil
    } else if false || resp.StatusCode == http.StatusEarlyHints { // want `"103" can be replaced by http\.StatusEarlyHints`
        return nil
    }
    if resp.StatusCode == http.StatusOK { // want `"200" can be replaced by http\.StatusOK`
        return nil
    } else if resp.StatusCode == http.StatusOK { // want `"200" can be replaced by http\.StatusOK`
        return nil
    } else if false || resp.StatusCode == http.StatusOK { // want `"200" can be replaced by http\.StatusOK`
        return nil
    }
    if resp.StatusCode == http.StatusCreated { // want `"201" can be replaced by http\.StatusCreated`
        return nil
    } else if resp.StatusCode == http.StatusCreated { // want `"201" can be replaced by http\.StatusCreated`
        return nil
    } else if false || resp.StatusCode == http.StatusCreated { // want `"201" can be replaced by http\.StatusCreated`
        return nil
    }
    if resp.StatusCode == http.StatusAccepted { // want `"202" can be replaced by http\.StatusAccepted`
        return nil
    } else if resp.StatusCode == http.StatusAccepted { // want `"202" can be replaced by http\.StatusAccepted`
        return nil
    } else if false || resp.StatusCode == http.StatusAccepted { // want `"202" can be replaced by http\.StatusAccepted`
        return nil
    }
    if resp.StatusCode == http.StatusNonAuthoritativeInfo { // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
        return nil
    } else if resp.StatusCode == http.StatusNonAuthoritativeInfo { // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
        return nil
    } else if false || resp.StatusCode == http.StatusNonAuthoritativeInfo { // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
        return nil
    }
    if resp.StatusCode == http.StatusNoContent { // want `"204" can be replaced by http\.StatusNoContent`
        return nil
    } else if resp.StatusCode == http.StatusNoContent { // want `"204" can be replaced by http\.StatusNoContent`
        return nil
    } else if false || resp.StatusCode == http.StatusNoContent { // want `"204" can be replaced by http\.StatusNoContent`
        return nil
    }
    if resp.StatusCode == http.StatusResetContent { // want `"205" can be replaced by http\.StatusResetContent`
        return nil
    } else if resp.StatusCode == http.StatusResetContent { // want `"205" can be replaced by http\.StatusResetContent`
        return nil
    } else if false || resp.StatusCode == http.StatusResetContent { // want `"205" can be replaced by http\.StatusResetContent`
        return nil
    }
    if resp.StatusCode == http.StatusPartialContent { // want `"206" can be replaced by http\.StatusPartialContent`
        return nil
    } else if resp.StatusCode == http.StatusPartialContent { // want `"206" can be replaced by http\.StatusPartialContent`
        return nil
    } else if false || resp.StatusCode == http.StatusPartialContent { // want `"206" can be replaced by http\.StatusPartialContent`
        return nil
    }
    if resp.StatusCode == http.StatusMultiStatus { // want `"207" can be replaced by http\.StatusMultiStatus`
        return nil
    } else if resp.StatusCode == http.StatusMultiStatus { // want `"207" can be replaced by http\.StatusMultiStatus`
        return nil
    } else if false || resp.StatusCode == http.StatusMultiStatus { // want `"207" can be replaced by http\.StatusMultiStatus`
        return nil
    }
    if resp.StatusCode == http.StatusAlreadyReported { // want `"208" can be replaced by http\.StatusAlreadyReported`
        return nil
    } else if resp.StatusCode == http.StatusAlreadyReported { // want `"208" can be replaced by http\.StatusAlreadyReported`
        return nil
    } else if false || resp.StatusCode == http.StatusAlreadyReported { // want `"208" can be replaced by http\.StatusAlreadyReported`
        return nil
    }
    if resp.StatusCode == http.StatusIMUsed { // want `"226" can be replaced by http\.StatusIMUsed`
        return nil
    } else if resp.StatusCode == http.StatusIMUsed { // want `"226" can be replaced by http\.StatusIMUsed`
        return nil
    } else if false || resp.StatusCode == http.StatusIMUsed { // want `"226" can be replaced by http\.StatusIMUsed`
        return nil
    }
    if resp.StatusCode == http.StatusMultipleChoices { // want `"300" can be replaced by http\.StatusMultipleChoices`
        return nil
    } else if resp.StatusCode == http.StatusMultipleChoices { // want `"300" can be replaced by http\.StatusMultipleChoices`
        return nil
    } else if false || resp.StatusCode == http.StatusMultipleChoices { // want `"300" can be replaced by http\.StatusMultipleChoices`
        return nil
    }
    if resp.StatusCode == http.StatusMovedPermanently { // want `"301" can be replaced by http\.StatusMovedPermanently`
        return nil
    } else if resp.StatusCode == http.StatusMovedPermanently { // want `"301" can be replaced by http\.StatusMovedPermanently`
        return nil
    } else if false || resp.StatusCode == http.StatusMovedPermanently { // want `"301" can be replaced by http\.StatusMovedPermanently`
        return nil
    }
    if resp.StatusCode == http.StatusFound { // want `"302" can be replaced by http\.StatusFound`
        return nil
    } else if resp.StatusCode == http.StatusFound { // want `"302" can be replaced by http\.StatusFound`
        return nil
    } else if false || resp.StatusCode == http.StatusFound { // want `"302" can be replaced by http\.StatusFound`
        return nil
    }
    if resp.StatusCode == http.StatusSeeOther { // want `"303" can be replaced by http\.StatusSeeOther`
        return nil
    } else if resp.StatusCode == http.StatusSeeOther { // want `"303" can be replaced by http\.StatusSeeOther`
        return nil
    } else if false || resp.StatusCode == http.StatusSeeOther { // want `"303" can be replaced by http\.StatusSeeOther`
        return nil
    }
    if resp.StatusCode == http.StatusNotModified { // want `"304" can be replaced by http\.StatusNotModified`
        return nil
    } else if resp.StatusCode == http.StatusNotModified { // want `"304" can be replaced by http\.StatusNotModified`
        return nil
    } else if false || resp.StatusCode == http.StatusNotModified { // want `"304" can be replaced by http\.StatusNotModified`
        return nil
    }
    if resp.StatusCode == http.StatusUseProxy { // want `"305" can be replaced by http\.StatusUseProxy`
        return nil
    } else if resp.StatusCode == http.StatusUseProxy { // want `"305" can be replaced by http\.StatusUseProxy`
        return nil
    } else if false || resp.StatusCode == http.StatusUseProxy { // want `"305" can be replaced by http\.StatusUseProxy`
        return nil
    }
    if resp.StatusCode == http.StatusTemporaryRedirect { // want `"307" can be replaced by http\.StatusTemporaryRedirect`
        return nil
    } else if resp.StatusCode == http.StatusTemporaryRedirect { // want `"307" can be replaced by http\.StatusTemporaryRedirect`
        return nil
    } else if false || resp.StatusCode == http.StatusTemporaryRedirect { // want `"307" can be replaced by http\.StatusTemporaryRedirect`
        return nil
    }
    if resp.StatusCode == http.StatusPermanentRedirect { // want `"308" can be replaced by http\.StatusPermanentRedirect`
        return nil
    } else if resp.StatusCode == http.StatusPermanentRedirect { // want `"308" can be replaced by http\.StatusPermanentRedirect`
        return nil
    } else if false || resp.StatusCode == http.StatusPermanentRedirect { // want `"308" can be replaced by http\.StatusPermanentRedirect`
        return nil
    }
    if resp.StatusCode == http.StatusBadRequest { // want `"400" can be replaced by http\.StatusBadRequest`
        return nil
    } else if resp.StatusCode == http.StatusBadRequest { // want `"400" can be replaced by http\.StatusBadRequest`
        return nil
    } else if false || resp.StatusCode == http.StatusBadRequest { // want `"400" can be replaced by http\.StatusBadRequest`
        return nil
    }
    if resp.StatusCode == http.StatusUnauthorized { // want `"401" can be replaced by http\.StatusUnauthorized`
        return nil
    } else if resp.StatusCode == http.StatusUnauthorized { // want `"401" can be replaced by http\.StatusUnauthorized`
        return nil
    } else if false || resp.StatusCode == http.StatusUnauthorized { // want `"401" can be replaced by http\.StatusUnauthorized`
        return nil
    }
    if resp.StatusCode == http.StatusPaymentRequired { // want `"402" can be replaced by http\.StatusPaymentRequired`
        return nil
    } else if resp.StatusCode == http.StatusPaymentRequired { // want `"402" can be replaced by http\.StatusPaymentRequired`
        return nil
    } else if false || resp.StatusCode == http.StatusPaymentRequired { // want `"402" can be replaced by http\.StatusPaymentRequired`
        return nil
    }
    if resp.StatusCode == http.StatusForbidden { // want `"403" can be replaced by http\.StatusForbidden`
        return nil
    } else if resp.StatusCode == http.StatusForbidden { // want `"403" can be replaced by http\.StatusForbidden`
        return nil
    } else if false || resp.StatusCode == http.StatusForbidden { // want `"403" can be replaced by http\.StatusForbidden`
        return nil
    }
    if resp.StatusCode == http.StatusNotFound { // want `"404" can be replaced by http\.StatusNotFound`
        return nil
    } else if resp.StatusCode == http.StatusNotFound { // want `"404" can be replaced by http\.StatusNotFound`
        return nil
    } else if false || resp.StatusCode == http.StatusNotFound { // want `"404" can be replaced by http\.StatusNotFound`
        return nil
    }
    if resp.StatusCode == http.StatusMethodNotAllowed { // want `"405" can be replaced by http\.StatusMethodNotAllowed`
        return nil
    } else if resp.StatusCode == http.StatusMethodNotAllowed { // want `"405" can be replaced by http\.StatusMethodNotAllowed`
        return nil
    } else if false || resp.StatusCode == http.StatusMethodNotAllowed { // want `"405" can be replaced by http\.StatusMethodNotAllowed`
        return nil
    }
    if resp.StatusCode == http.StatusNotAcceptable { // want `"406" can be replaced by http\.StatusNotAcceptable`
        return nil
    } else if resp.StatusCode == http.StatusNotAcceptable { // want `"406" can be replaced by http\.StatusNotAcceptable`
        return nil
    } else if false || resp.StatusCode == http.StatusNotAcceptable { // want `"406" can be replaced by http\.StatusNotAcceptable`
        return nil
    }
    if resp.StatusCode == http.StatusProxyAuthRequired { // want `"407" can be replaced by http\.StatusProxyAuthRequired`
        return nil
    } else if resp.StatusCode == http.StatusProxyAuthRequired { // want `"407" can be replaced by http\.StatusProxyAuthRequired`
        return nil
    } else if false || resp.StatusCode == http.StatusProxyAuthRequired { // want `"407" can be replaced by http\.StatusProxyAuthRequired`
        return nil
    }
    if resp.StatusCode == http.StatusRequestTimeout { // want `"408" can be replaced by http\.StatusRequestTimeout`
        return nil
    } else if resp.StatusCode == http.StatusRequestTimeout { // want `"408" can be replaced by http\.StatusRequestTimeout`
        return nil
    } else if false || resp.StatusCode == http.StatusRequestTimeout { // want `"408" can be replaced by http\.StatusRequestTimeout`
        return nil
    }
    if resp.StatusCode == http.StatusConflict { // want `"409" can be replaced by http\.StatusConflict`
        return nil
    } else if resp.StatusCode == http.StatusConflict { // want `"409" can be replaced by http\.StatusConflict`
        return nil
    } else if false || resp.StatusCode == http.StatusConflict { // want `"409" can be replaced by http\.StatusConflict`
        return nil
    }
    if resp.StatusCode == http.StatusGone { // want `"410" can be replaced by http\.StatusGone`
        return nil
    } else if resp.StatusCode == http.StatusGone { // want `"410" can be replaced by http\.StatusGone`
        return nil
    } else if false || resp.StatusCode == http.StatusGone { // want `"410" can be replaced by http\.StatusGone`
        return nil
    }
    if resp.StatusCode == http.StatusLengthRequired { // want `"411" can be replaced by http\.StatusLengthRequired`
        return nil
    } else if resp.StatusCode == http.StatusLengthRequired { // want `"411" can be replaced by http\.StatusLengthRequired`
        return nil
    } else if false || resp.StatusCode == http.StatusLengthRequired { // want `"411" can be replaced by http\.StatusLengthRequired`
        return nil
    }
    if resp.StatusCode == http.StatusPreconditionFailed { // want `"412" can be replaced by http\.StatusPreconditionFailed`
        return nil
    } else if resp.StatusCode == http.StatusPreconditionFailed { // want `"412" can be replaced by http\.StatusPreconditionFailed`
        return nil
    } else if false || resp.StatusCode == http.StatusPreconditionFailed { // want `"412" can be replaced by http\.StatusPreconditionFailed`
        return nil
    }
    if resp.StatusCode == http.StatusRequestEntityTooLarge { // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
        return nil
    } else if resp.StatusCode == http.StatusRequestEntityTooLarge { // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
        return nil
    } else if false || resp.StatusCode == http.StatusRequestEntityTooLarge { // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
        return nil
    }
    if resp.StatusCode == http.StatusRequestURITooLong { // want `"414" can be replaced by http\.StatusRequestURITooLong`
        return nil
    } else if resp.StatusCode == http.StatusRequestURITooLong { // want `"414" can be replaced by http\.StatusRequestURITooLong`
        return nil
    } else if false || resp.StatusCode == http.StatusRequestURITooLong { // want `"414" can be replaced by http\.StatusRequestURITooLong`
        return nil
    }
    if resp.StatusCode == http.StatusUnsupportedMediaType { // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
        return nil
    } else if resp.StatusCode == http.StatusUnsupportedMediaType { // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
        return nil
    } else if false || resp.StatusCode == http.StatusUnsupportedMediaType { // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
        return nil
    }
    if resp.StatusCode == http.StatusRequestedRangeNotSatisfiable { // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
        return nil
    } else if resp.StatusCode == http.StatusRequestedRangeNotSatisfiable { // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
        return nil
    } else if false || resp.StatusCode == http.StatusRequestedRangeNotSatisfiable { // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
        return nil
    }
    if resp.StatusCode == http.StatusExpectationFailed { // want `"417" can be replaced by http\.StatusExpectationFailed`
        return nil
    } else if resp.StatusCode == http.StatusExpectationFailed { // want `"417" can be replaced by http\.StatusExpectationFailed`
        return nil
    } else if false || resp.StatusCode == http.StatusExpectationFailed { // want `"417" can be replaced by http\.StatusExpectationFailed`
        return nil
    }
    if resp.StatusCode == http.StatusTeapot { // want `"418" can be replaced by http\.StatusTeapot`
        return nil
    } else if resp.StatusCode == http.StatusTeapot { // want `"418" can be replaced by http\.StatusTeapot`
        return nil
    } else if false || resp.StatusCode == http.StatusTeapot { // want `"418" can be replaced by http\.StatusTeapot`
        return nil
    }
    if resp.StatusCode == http.StatusMisdirectedRequest { // want `"421" can be replaced by http\.StatusMisdirectedRequest`
        return nil
    } else if resp.StatusCode == http.StatusMisdirectedRequest { // want `"421" can be replaced by http\.StatusMisdirectedRequest`
        return nil
    } else if false || resp.StatusCode == http.StatusMisdirectedRequest { // want `"421" can be replaced by http\.StatusMisdirectedRequest`
        return nil
    }
    if resp.StatusCode == http.StatusUnprocessableEntity { // want `"422" can be replaced by http\.StatusUnprocessableEntity`
        return nil
    } else if resp.StatusCode == http.StatusUnprocessableEntity { // want `"422" can be replaced by http\.StatusUnprocessableEntity`
        return nil
    } else if false || resp.StatusCode == http.StatusUnprocessableEntity { // want `"422" can be replaced by http\.StatusUnprocessableEntity`
        return nil
    }
    if resp.StatusCode == http.StatusLocked { // want `"423" can be replaced by http\.StatusLocked`
        return nil
    } else if resp.StatusCode == http.StatusLocked { // want `"423" can be replaced by http\.StatusLocked`
        return nil
    } else if false || resp.StatusCode == http.StatusLocked { // want `"423" can be replaced by http\.StatusLocked`
        return nil
    }
    if resp.StatusCode == http.StatusFailedDependency { // want `"424" can be replaced by http\.StatusFailedDependency`
        return nil
    } else if resp.StatusCode == http.StatusFailedDependency { // want `"424" can be replaced by http\.StatusFailedDependency`
        return nil
    } else if false || resp.StatusCode == http.StatusFailedDependency { // want `"424" can be replaced by http\.StatusFailedDependency`
        return nil
    }
    if resp.StatusCode == http.StatusTooEarly { // want `"425" can be replaced by http\.StatusTooEarly`
        return nil
    } else if resp.StatusCode == http.StatusTooEarly { // want `"425" can be replaced by http\.StatusTooEarly`
        return nil
    } else if false || resp.StatusCode == http.StatusTooEarly { // want `"425" can be replaced by http\.StatusTooEarly`
        return nil
    }
    if resp.StatusCode == http.StatusUpgradeRequired { // want `"426" can be replaced by http\.StatusUpgradeRequired`
        return nil
    } else if resp.StatusCode == http.StatusUpgradeRequired { // want `"426" can be replaced by http\.StatusUpgradeRequired`
        return nil
    } else if false || resp.StatusCode == http.StatusUpgradeRequired { // want `"426" can be replaced by http\.StatusUpgradeRequired`
        return nil
    }
    if resp.StatusCode == http.StatusPreconditionRequired { // want `"428" can be replaced by http\.StatusPreconditionRequired`
        return nil
    } else if resp.StatusCode == http.StatusPreconditionRequired { // want `"428" can be replaced by http\.StatusPreconditionRequired`
        return nil
    } else if false || resp.StatusCode == http.StatusPreconditionRequired { // want `"428" can be replaced by http\.StatusPreconditionRequired`
        return nil
    }
    if resp.StatusCode == http.StatusTooManyRequests { // want `"429" can be replaced by http\.StatusTooManyRequests`
        return nil
    } else if resp.StatusCode == http.StatusTooManyRequests { // want `"429" can be replaced by http\.StatusTooManyRequests`
        return nil
    } else if false || resp.StatusCode == http.StatusTooManyRequests { // want `"429" can be replaced by http\.StatusTooManyRequests`
        return nil
    }
    if resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge { // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
        return nil
    } else if resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge { // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
        return nil
    } else if false || resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge { // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
        return nil
    }
    if resp.StatusCode == http.StatusUnavailableForLegalReasons { // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
        return nil
    } else if resp.StatusCode == http.StatusUnavailableForLegalReasons { // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
        return nil
    } else if false || resp.StatusCode == http.StatusUnavailableForLegalReasons { // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
        return nil
    }
    if resp.StatusCode == http.StatusInternalServerError { // want `"500" can be replaced by http\.StatusInternalServerError`
        return nil
    } else if resp.StatusCode == http.StatusInternalServerError { // want `"500" can be replaced by http\.StatusInternalServerError`
        return nil
    } else if false || resp.StatusCode == http.StatusInternalServerError { // want `"500" can be replaced by http\.StatusInternalServerError`
        return nil
    }
    if resp.StatusCode == http.StatusNotImplemented { // want `"501" can be replaced by http\.StatusNotImplemented`
        return nil
    } else if resp.StatusCode == http.StatusNotImplemented { // want `"501" can be replaced by http\.StatusNotImplemented`
        return nil
    } else if false || resp.StatusCode == http.StatusNotImplemented { // want `"501" can be replaced by http\.StatusNotImplemented`
        return nil
    }
    if resp.StatusCode == http.StatusBadGateway { // want `"502" can be replaced by http\.StatusBadGateway`
        return nil
    } else if resp.StatusCode == http.StatusBadGateway { // want `"502" can be replaced by http\.StatusBadGateway`
        return nil
    } else if false || resp.StatusCode == http.StatusBadGateway { // want `"502" can be replaced by http\.StatusBadGateway`
        return nil
    }
    if resp.StatusCode == http.StatusServiceUnavailable { // want `"503" can be replaced by http\.StatusServiceUnavailable`
        return nil
    } else if resp.StatusCode == http.StatusServiceUnavailable { // want `"503" can be replaced by http\.StatusServiceUnavailable`
        return nil
    } else if false || resp.StatusCode == http.StatusServiceUnavailable { // want `"503" can be replaced by http\.StatusServiceUnavailable`
        return nil
    }
    if resp.StatusCode == http.StatusGatewayTimeout { // want `"504" can be replaced by http\.StatusGatewayTimeout`
        return nil
    } else if resp.StatusCode == http.StatusGatewayTimeout { // want `"504" can be replaced by http\.StatusGatewayTimeout`
        return nil
    } else if false || resp.StatusCode == http.StatusGatewayTimeout { // want `"504" can be replaced by http\.StatusGatewayTimeout`
        return nil
    }
    if resp.StatusCode == http.StatusHTTPVersionNotSupported { // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
        return nil
    } else if resp.StatusCode == http.StatusHTTPVersionNotSupported { // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
        return nil
    } else if false || resp.StatusCode == http.StatusHTTPVersionNotSupported { // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
        return nil
    }
    if resp.StatusCode == http.StatusVariantAlsoNegotiates { // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
        return nil
    } else if resp.StatusCode == http.StatusVariantAlsoNegotiates { // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
        return nil
    } else if false || resp.StatusCode == http.StatusVariantAlsoNegotiates { // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
        return nil
    }
    if resp.StatusCode == http.StatusInsufficientStorage { // want `"507" can be replaced by http\.StatusInsufficientStorage`
        return nil
    } else if resp.StatusCode == http.StatusInsufficientStorage { // want `"507" can be replaced by http\.StatusInsufficientStorage`
        return nil
    } else if false || resp.StatusCode == http.StatusInsufficientStorage { // want `"507" can be replaced by http\.StatusInsufficientStorage`
        return nil
    }
    if resp.StatusCode == http.StatusLoopDetected { // want `"508" can be replaced by http\.StatusLoopDetected`
        return nil
    } else if resp.StatusCode == http.StatusLoopDetected { // want `"508" can be replaced by http\.StatusLoopDetected`
        return nil
    } else if false || resp.StatusCode == http.StatusLoopDetected { // want `"508" can be replaced by http\.StatusLoopDetected`
        return nil
    }
    if resp.StatusCode == http.StatusNotExtended { // want `"510" can be replaced by http\.StatusNotExtended`
        return nil
    } else if resp.StatusCode == http.StatusNotExtended { // want `"510" can be replaced by http\.StatusNotExtended`
        return nil
    } else if false || resp.StatusCode == http.StatusNotExtended { // want `"510" can be replaced by http\.StatusNotExtended`
        return nil
    }
    if resp.StatusCode == http.StatusNetworkAuthenticationRequired { // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
        return nil
    } else if resp.StatusCode == http.StatusNetworkAuthenticationRequired { // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
        return nil
    } else if false || resp.StatusCode == http.StatusNetworkAuthenticationRequired { // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
        return nil
    }
    for resp.StatusCode == http.StatusContinue { // want `"100" can be replaced by http\.StatusContinue`
        return nil
    }
    for resp.StatusCode == http.StatusSwitchingProtocols { // want `"101" can be replaced by http\.StatusSwitchingProtocols`
        return nil
    }
    for resp.StatusCode == http.StatusProcessing { // want `"102" can be replaced by http\.StatusProcessing`
        return nil
    }
    for resp.StatusCode == http.StatusEarlyHints { // want `"103" can be replaced by http\.StatusEarlyHints`
        return nil
    }
    for resp.StatusCode == http.StatusOK { // want `"200" can be replaced by http\.StatusOK`
        return nil
    }
    for resp.StatusCode == http.StatusCreated { // want `"201" can be replaced by http\.StatusCreated`
        return nil
    }
    for resp.StatusCode == http.StatusAccepted { // want `"202" can be replaced by http\.StatusAccepted`
        return nil
    }
    for resp.StatusCode == http.StatusNonAuthoritativeInfo { // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
        return nil
    }
    for resp.StatusCode == http.StatusNoContent { // want `"204" can be replaced by http\.StatusNoContent`
        return nil
    }
    for resp.StatusCode == http.StatusResetContent { // want `"205" can be replaced by http\.StatusResetContent`
        return nil
    }
    for resp.StatusCode == http.StatusPartialContent { // want `"206" can be replaced by http\.StatusPartialContent`
        return nil
    }
    for resp.StatusCode == http.StatusMultiStatus { // want `"207" can be replaced by http\.StatusMultiStatus`
        return nil
    }
    for resp.StatusCode == http.StatusAlreadyReported { // want `"208" can be replaced by http\.StatusAlreadyReported`
        return nil
    }
    for resp.StatusCode == http.StatusIMUsed { // want `"226" can be replaced by http\.StatusIMUsed`
        return nil
    }
    for resp.StatusCode == http.StatusMultipleChoices { // want `"300" can be replaced by http\.StatusMultipleChoices`
        return nil
    }
    for resp.StatusCode == http.StatusMovedPermanently { // want `"301" can be replaced by http\.StatusMovedPermanently`
        return nil
    }
    for resp.StatusCode == http.StatusFound { // want `"302" can be replaced by http\.StatusFound`
        return nil
    }
    for resp.StatusCode == http.StatusSeeOther { // want `"303" can be replaced by http\.StatusSeeOther`
        return nil
    }
    for resp.StatusCode == http.StatusNotModified { // want `"304" can be replaced by http\.StatusNotModified`
        return nil
    }
    for resp.StatusCode == http.StatusUseProxy { // want `"305" can be replaced by http\.StatusUseProxy`
        return nil
    }
    for resp.StatusCode == http.StatusTemporaryRedirect { // want `"307" can be replaced by http\.StatusTemporaryRedirect`
        return nil
    }
    for resp.StatusCode == http.StatusPermanentRedirect { // want `"308" can be replaced by http\.StatusPermanentRedirect`
        return nil
    }
    for resp.StatusCode == http.StatusBadRequest { // want `"400" can be replaced by http\.StatusBadRequest`
        return nil
    }
    for resp.StatusCode == http.StatusUnauthorized { // want `"401" can be replaced by http\.StatusUnauthorized`
        return nil
    }
    for resp.StatusCode == http.StatusPaymentRequired { // want `"402" can be replaced by http\.StatusPaymentRequired`
        return nil
    }
    for resp.StatusCode == http.StatusForbidden { // want `"403" can be replaced by http\.StatusForbidden`
        return nil
    }
    for resp.StatusCode == http.StatusNotFound { // want `"404" can be replaced by http\.StatusNotFound`
        return nil
    }
    for resp.StatusCode == http.StatusMethodNotAllowed { // want `"405" can be replaced by http\.StatusMethodNotAllowed`
        return nil
    }
    for resp.StatusCode == http.StatusNotAcceptable { // want `"406" can be replaced by http\.StatusNotAcceptable`
        return nil
    }
    for resp.StatusCode == http.StatusProxyAuthRequired { // want `"407" can be replaced by http\.StatusProxyAuthRequired`
        return nil
    }
    for resp.StatusCode == http.StatusRequestTimeout { // want `"408" can be replaced by http\.StatusRequestTimeout`
        return nil
    }
    for resp.StatusCode == http.StatusConflict { // want `"409" can be replaced by http\.StatusConflict`
        return nil
    }
    for resp.StatusCode == http.StatusGone { // want `"410" can be replaced by http\.StatusGone`
        return nil
    }
    for resp.StatusCode == http.StatusLengthRequired { // want `"411" can be replaced by http\.StatusLengthRequired`
        return nil
    }
    for resp.StatusCode == http.StatusPreconditionFailed { // want `"412" can be replaced by http\.StatusPreconditionFailed`
        return nil
    }
    for resp.StatusCode == http.StatusRequestEntityTooLarge { // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
        return nil
    }
    for resp.StatusCode == http.StatusRequestURITooLong { // want `"414" can be replaced by http\.StatusRequestURITooLong`
        return nil
    }
    for resp.StatusCode == http.StatusUnsupportedMediaType { // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
        return nil
    }
    for resp.StatusCode == http.StatusRequestedRangeNotSatisfiable { // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
        return nil
    }
    for resp.StatusCode == http.StatusExpectationFailed { // want `"417" can be replaced by http\.StatusExpectationFailed`
        return nil
    }
    for resp.StatusCode == http.StatusTeapot { // want `"418" can be replaced by http\.StatusTeapot`
        return nil
    }
    for resp.StatusCode == http.StatusMisdirectedRequest { // want `"421" can be replaced by http\.StatusMisdirectedRequest`
        return nil
    }
    for resp.StatusCode == http.StatusUnprocessableEntity { // want `"422" can be replaced by http\.StatusUnprocessableEntity`
        return nil
    }
    for resp.StatusCode == http.StatusLocked { // want `"423" can be replaced by http\.StatusLocked`
        return nil
    }
    for resp.StatusCode == http.StatusFailedDependency { // want `"424" can be replaced by http\.StatusFailedDependency`
        return nil
    }
    for resp.StatusCode == http.StatusTooEarly { // want `"425" can be replaced by http\.StatusTooEarly`
        return nil
    }
    for resp.StatusCode == http.StatusUpgradeRequired { // want `"426" can be replaced by http\.StatusUpgradeRequired`
        return nil
    }
    for resp.StatusCode == http.StatusPreconditionRequired { // want `"428" can be replaced by http\.StatusPreconditionRequired`
        return nil
    }
    for resp.StatusCode == http.StatusTooManyRequests { // want `"429" can be replaced by http\.StatusTooManyRequests`
        return nil
    }
    for resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge { // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
        return nil
    }
    for resp.StatusCode == http.StatusUnavailableForLegalReasons { // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
        return nil
    }
    for resp.StatusCode == http.StatusInternalServerError { // want `"500" can be replaced by http\.StatusInternalServerError`
        return nil
    }
    for resp.StatusCode == http.StatusNotImplemented { // want `"501" can be replaced by http\.StatusNotImplemented`
        return nil
    }
    for resp.StatusCode == http.StatusBadGateway { // want `"502" can be replaced by http\.StatusBadGateway`
        return nil
    }
    for resp.StatusCode == http.StatusServiceUnavailable { // want `"503" can be replaced by http\.StatusServiceUnavailable`
        return nil
    }
    for resp.StatusCode == http.StatusGatewayTimeout { // want `"504" can be replaced by http\.StatusGatewayTimeout`
        return nil
    }
    for resp.StatusCode == http.StatusHTTPVersionNotSupported { // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
        return nil
    }
    for resp.StatusCode == http.StatusVariantAlsoNegotiates { // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
        return nil
    }
    for resp.StatusCode == http.StatusInsufficientStorage { // want `"507" can be replaced by http\.StatusInsufficientStorage`
        return nil
    }
    for resp.StatusCode == http.StatusLoopDetected { // want `"508" can be replaced by http\.StatusLoopDetected`
        return nil
    }
    for resp.StatusCode == http.StatusNotExtended { // want `"510" can be replaced by http\.StatusNotExtended`
        return nil
    }
    for resp.StatusCode == http.StatusNetworkAuthenticationRequired { // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
        return nil
    }
    return nil
}

func _() error {
    resp, err := http.DefaultClient.Do(&http.Request{})
    if err != nil {
        return err
    }
    defer func() { _ = resp.Body.Close() }()
    if resp.StatusCode == http.StatusContinue {
        return nil
    } else if resp.StatusCode == http.StatusContinue {
        return nil
    } else if false || resp.StatusCode == http.StatusContinue {
        return nil
    }
    if resp.StatusCode == http.StatusSwitchingProtocols {
        return nil
    } else if resp.StatusCode == http.StatusSwitchingProtocols {
        return nil
    } else if false || resp.StatusCode == http.StatusSwitchingProtocols {
        return nil
    }
    if resp.StatusCode == http.StatusProcessing {
        return nil
    } else if resp.StatusCode == http.StatusProcessing {
        return nil
    } else if false || resp.StatusCode == http.StatusProcessing {
        return nil
    }
    if resp.StatusCode == http.StatusEarlyHints {
        return nil
    } else if resp.StatusCode == http.StatusEarlyHints {
        return nil
    } else if false || resp.StatusCode == http.StatusEarlyHints {
        return nil
    }
    if resp.StatusCode == http.StatusOK {
        return nil
    } else if resp.StatusCode == http.StatusOK {
        return nil
    } else if false || resp.StatusCode == http.StatusOK {
        return nil
    }
    if resp.StatusCode == http.StatusCreated {
        return nil
    } else if resp.StatusCode == http.StatusCreated {
        return nil
    } else if false || resp.StatusCode == http.StatusCreated {
        return nil
    }
    if resp.StatusCode == http.StatusAccepted {
        return nil
    } else if resp.StatusCode == http.StatusAccepted {
        return nil
    } else if false || resp.StatusCode == http.StatusAccepted {
        return nil
    }
    if resp.StatusCode == http.StatusNonAuthoritativeInfo {
        return nil
    } else if resp.StatusCode == http.StatusNonAuthoritativeInfo {
        return nil
    } else if false || resp.StatusCode == http.StatusNonAuthoritativeInfo {
        return nil
    }
    if resp.StatusCode == http.StatusNoContent {
        return nil
    } else if resp.StatusCode == http.StatusNoContent {
        return nil
    } else if false || resp.StatusCode == http.StatusNoContent {
        return nil
    }
    if resp.StatusCode == http.StatusResetContent {
        return nil
    } else if resp.StatusCode == http.StatusResetContent {
        return nil
    } else if false || resp.StatusCode == http.StatusResetContent {
        return nil
    }
    if resp.StatusCode == http.StatusPartialContent {
        return nil
    } else if resp.StatusCode == http.StatusPartialContent {
        return nil
    } else if false || resp.StatusCode == http.StatusPartialContent {
        return nil
    }
    if resp.StatusCode == http.StatusMultiStatus {
        return nil
    } else if resp.StatusCode == http.StatusMultiStatus {
        return nil
    } else if false || resp.StatusCode == http.StatusMultiStatus {
        return nil
    }
    if resp.StatusCode == http.StatusAlreadyReported {
        return nil
    } else if resp.StatusCode == http.StatusAlreadyReported {
        return nil
    } else if false || resp.StatusCode == http.StatusAlreadyReported {
        return nil
    }
    if resp.StatusCode == http.StatusIMUsed {
        return nil
    } else if resp.StatusCode == http.StatusIMUsed {
        return nil
    } else if false || resp.StatusCode == http.StatusIMUsed {
        return nil
    }
    if resp.StatusCode == http.StatusMultipleChoices {
        return nil
    } else if resp.StatusCode == http.StatusMultipleChoices {
        return nil
    } else if false || resp.StatusCode == http.StatusMultipleChoices {
        return nil
    }
    if resp.StatusCode == http.StatusMovedPermanently {
        return nil
    } else if resp.StatusCode == http.StatusMovedPermanently {
        return nil
    } else if false || resp.StatusCode == http.StatusMovedPermanently {
        return nil
    }
    if resp.StatusCode == http.StatusFound {
        return nil
    } else if resp.StatusCode == http.StatusFound {
        return nil
    } else if false || resp.StatusCode == http.StatusFound {
        return nil
    }
    if resp.StatusCode == http.StatusSeeOther {
        return nil
    } else if resp.StatusCode == http.StatusSeeOther {
        return nil
    } else if false || resp.StatusCode == http.StatusSeeOther {
        return nil
    }
    if resp.StatusCode == http.StatusNotModified {
        return nil
    } else if resp.StatusCode == http.StatusNotModified {
        return nil
    } else if false || resp.StatusCode == http.StatusNotModified {
        return nil
    }
    if resp.StatusCode == http.StatusUseProxy {
        return nil
    } else if resp.StatusCode == http.StatusUseProxy {
        return nil
    } else if false || resp.StatusCode == http.StatusUseProxy {
        return nil
    }
    if resp.StatusCode == http.StatusTemporaryRedirect {
        return nil
    } else if resp.StatusCode == http.StatusTemporaryRedirect {
        return nil
    } else if false || resp.StatusCode == http.StatusTemporaryRedirect {
        return nil
    }
    if resp.StatusCode == http.StatusPermanentRedirect {
        return nil
    } else if resp.StatusCode == http.StatusPermanentRedirect {
        return nil
    } else if false || resp.StatusCode == http.StatusPermanentRedirect {
        return nil
    }
    if resp.StatusCode == http.StatusBadRequest {
        return nil
    } else if resp.StatusCode == http.StatusBadRequest {
        return nil
    } else if false || resp.StatusCode == http.StatusBadRequest {
        return nil
    }
    if resp.StatusCode == http.StatusUnauthorized {
        return nil
    } else if resp.StatusCode == http.StatusUnauthorized {
        return nil
    } else if false || resp.StatusCode == http.StatusUnauthorized {
        return nil
    }
    if resp.StatusCode == http.StatusPaymentRequired {
        return nil
    } else if resp.StatusCode == http.StatusPaymentRequired {
        return nil
    } else if false || resp.StatusCode == http.StatusPaymentRequired {
        return nil
    }
    if resp.StatusCode == http.StatusForbidden {
        return nil
    } else if resp.StatusCode == http.StatusForbidden {
        return nil
    } else if false || resp.StatusCode == http.StatusForbidden {
        return nil
    }
    if resp.StatusCode == http.StatusNotFound {
        return nil
    } else if resp.StatusCode == http.StatusNotFound {
        return nil
    } else if false || resp.StatusCode == http.StatusNotFound {
        return nil
    }
    if resp.StatusCode == http.StatusMethodNotAllowed {
        return nil
    } else if resp.StatusCode == http.StatusMethodNotAllowed {
        return nil
    } else if false || resp.StatusCode == http.StatusMethodNotAllowed {
        return nil
    }
    if resp.StatusCode == http.StatusNotAcceptable {
        return nil
    } else if resp.StatusCode == http.StatusNotAcceptable {
        return nil
    } else if false || resp.StatusCode == http.StatusNotAcceptable {
        return nil
    }
    if resp.StatusCode == http.StatusProxyAuthRequired {
        return nil
    } else if resp.StatusCode == http.StatusProxyAuthRequired {
        return nil
    } else if false || resp.StatusCode == http.StatusProxyAuthRequired {
        return nil
    }
    if resp.StatusCode == http.StatusRequestTimeout {
        return nil
    } else if resp.StatusCode == http.StatusRequestTimeout {
        return nil
    } else if false || resp.StatusCode == http.StatusRequestTimeout {
        return nil
    }
    if resp.StatusCode == http.StatusConflict {
        return nil
    } else if resp.StatusCode == http.StatusConflict {
        return nil
    } else if false || resp.StatusCode == http.StatusConflict {
        return nil
    }
    if resp.StatusCode == http.StatusGone {
        return nil
    } else if resp.StatusCode == http.StatusGone {
        return nil
    } else if false || resp.StatusCode == http.StatusGone {
        return nil
    }
    if resp.StatusCode == http.StatusLengthRequired {
        return nil
    } else if resp.StatusCode == http.StatusLengthRequired {
        return nil
    } else if false || resp.StatusCode == http.StatusLengthRequired {
        return nil
    }
    if resp.StatusCode == http.StatusPreconditionFailed {
        return nil
    } else if resp.StatusCode == http.StatusPreconditionFailed {
        return nil
    } else if false || resp.StatusCode == http.StatusPreconditionFailed {
        return nil
    }
    if resp.StatusCode == http.StatusRequestEntityTooLarge {
        return nil
    } else if resp.StatusCode == http.StatusRequestEntityTooLarge {
        return nil
    } else if false || resp.StatusCode == http.StatusRequestEntityTooLarge {
        return nil
    }
    if resp.StatusCode == http.StatusRequestURITooLong {
        return nil
    } else if resp.StatusCode == http.StatusRequestURITooLong {
        return nil
    } else if false || resp.StatusCode == http.StatusRequestURITooLong {
        return nil
    }
    if resp.StatusCode == http.StatusUnsupportedMediaType {
        return nil
    } else if resp.StatusCode == http.StatusUnsupportedMediaType {
        return nil
    } else if false || resp.StatusCode == http.StatusUnsupportedMediaType {
        return nil
    }
    if resp.StatusCode == http.StatusRequestedRangeNotSatisfiable {
        return nil
    } else if resp.StatusCode == http.StatusRequestedRangeNotSatisfiable {
        return nil
    } else if false || resp.StatusCode == http.StatusRequestedRangeNotSatisfiable {
        return nil
    }
    if resp.StatusCode == http.StatusExpectationFailed {
        return nil
    } else if resp.StatusCode == http.StatusExpectationFailed {
        return nil
    } else if false || resp.StatusCode == http.StatusExpectationFailed {
        return nil
    }
    if resp.StatusCode == http.StatusTeapot {
        return nil
    } else if resp.StatusCode == http.StatusTeapot {
        return nil
    } else if false || resp.StatusCode == http.StatusTeapot {
        return nil
    }
    if resp.StatusCode == http.StatusMisdirectedRequest {
        return nil
    } else if resp.StatusCode == http.StatusMisdirectedRequest {
        return nil
    } else if false || resp.StatusCode == http.StatusMisdirectedRequest {
        return nil
    }
    if resp.StatusCode == http.StatusUnprocessableEntity {
        return nil
    } else if resp.StatusCode == http.StatusUnprocessableEntity {
        return nil
    } else if false || resp.StatusCode == http.StatusUnprocessableEntity {
        return nil
    }
    if resp.StatusCode == http.StatusLocked {
        return nil
    } else if resp.StatusCode == http.StatusLocked {
        return nil
    } else if false || resp.StatusCode == http.StatusLocked {
        return nil
    }
    if resp.StatusCode == http.StatusFailedDependency {
        return nil
    } else if resp.StatusCode == http.StatusFailedDependency {
        return nil
    } else if false || resp.StatusCode == http.StatusFailedDependency {
        return nil
    }
    if resp.StatusCode == http.StatusTooEarly {
        return nil
    } else if resp.StatusCode == http.StatusTooEarly {
        return nil
    } else if false || resp.StatusCode == http.StatusTooEarly {
        return nil
    }
    if resp.StatusCode == http.StatusUpgradeRequired {
        return nil
    } else if resp.StatusCode == http.StatusUpgradeRequired {
        return nil
    } else if false || resp.StatusCode == http.StatusUpgradeRequired {
        return nil
    }
    if resp.StatusCode == http.StatusPreconditionRequired {
        return nil
    } else if resp.StatusCode == http.StatusPreconditionRequired {
        return nil
    } else if false || resp.StatusCode == http.StatusPreconditionRequired {
        return nil
    }
    if resp.StatusCode == http.StatusTooManyRequests {
        return nil
    } else if resp.StatusCode == http.StatusTooManyRequests {
        return nil
    } else if false || resp.StatusCode == http.StatusTooManyRequests {
        return nil
    }
    if resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge {
        return nil
    } else if resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge {
        return nil
    } else if false || resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge {
        return nil
    }
    if resp.StatusCode == http.StatusUnavailableForLegalReasons {
        return nil
    } else if resp.StatusCode == http.StatusUnavailableForLegalReasons {
        return nil
    } else if false || resp.StatusCode == http.StatusUnavailableForLegalReasons {
        return nil
    }
    if resp.StatusCode == http.StatusInternalServerError {
        return nil
    } else if resp.StatusCode == http.StatusInternalServerError {
        return nil
    } else if false || resp.StatusCode == http.StatusInternalServerError {
        return nil
    }
    if resp.StatusCode == http.StatusNotImplemented {
        return nil
    } else if resp.StatusCode == http.StatusNotImplemented {
        return nil
    } else if false || resp.StatusCode == http.StatusNotImplemented {
        return nil
    }
    if resp.StatusCode == http.StatusBadGateway {
        return nil
    } else if resp.StatusCode == http.StatusBadGateway {
        return nil
    } else if false || resp.StatusCode == http.StatusBadGateway {
        return nil
    }
    if resp.StatusCode == http.StatusServiceUnavailable {
        return nil
    } else if resp.StatusCode == http.StatusServiceUnavailable {
        return nil
    } else if false || resp.StatusCode == http.StatusServiceUnavailable {
        return nil
    }
    if resp.StatusCode == http.StatusGatewayTimeout {
        return nil
    } else if resp.StatusCode == http.StatusGatewayTimeout {
        return nil
    } else if false || resp.StatusCode == http.StatusGatewayTimeout {
        return nil
    }
    if resp.StatusCode == http.StatusHTTPVersionNotSupported {
        return nil
    } else if resp.StatusCode == http.StatusHTTPVersionNotSupported {
        return nil
    } else if false || resp.StatusCode == http.StatusHTTPVersionNotSupported {
        return nil
    }
    if resp.StatusCode == http.StatusVariantAlsoNegotiates {
        return nil
    } else if resp.StatusCode == http.StatusVariantAlsoNegotiates {
        return nil
    } else if false || resp.StatusCode == http.StatusVariantAlsoNegotiates {
        return nil
    }
    if resp.StatusCode == http.StatusInsufficientStorage {
        return nil
    } else if resp.StatusCode == http.StatusInsufficientStorage {
        return nil
    } else if false || resp.StatusCode == http.StatusInsufficientStorage {
        return nil
    }
    if resp.StatusCode == http.StatusLoopDetected {
        return nil
    } else if resp.StatusCode == http.StatusLoopDetected {
        return nil
    } else if false || resp.StatusCode == http.StatusLoopDetected {
        return nil
    }
    if resp.StatusCode == http.StatusNotExtended {
        return nil
    } else if resp.StatusCode == http.StatusNotExtended {
        return nil
    } else if false || resp.StatusCode == http.StatusNotExtended {
        return nil
    }
    if resp.StatusCode == http.StatusNetworkAuthenticationRequired {
        return nil
    } else if resp.StatusCode == http.StatusNetworkAuthenticationRequired {
        return nil
    } else if false || resp.StatusCode == http.StatusNetworkAuthenticationRequired {
        return nil
    }
    for resp.StatusCode == http.StatusContinue {
        return nil
    }
    for resp.StatusCode == http.StatusSwitchingProtocols {
        return nil
    }
    for resp.StatusCode == http.StatusProcessing {
        return nil
    }
    for resp.StatusCode == http.StatusEarlyHints {
        return nil
    }
    for resp.StatusCode == http.StatusOK {
        return nil
    }
    for resp.StatusCode == http.StatusCreated {
        return nil
    }
    for resp.StatusCode == http.StatusAccepted {
        return nil
    }
    for resp.StatusCode == http.StatusNonAuthoritativeInfo {
        return nil
    }
    for resp.StatusCode == http.StatusNoContent {
        return nil
    }
    for resp.StatusCode == http.StatusResetContent {
        return nil
    }
    for resp.StatusCode == http.StatusPartialContent {
        return nil
    }
    for resp.StatusCode == http.StatusMultiStatus {
        return nil
    }
    for resp.StatusCode == http.StatusAlreadyReported {
        return nil
    }
    for resp.StatusCode == http.StatusIMUsed {
        return nil
    }
    for resp.StatusCode == http.StatusMultipleChoices {
        return nil
    }
    for resp.StatusCode == http.StatusMovedPermanently {
        return nil
    }
    for resp.StatusCode == http.StatusFound {
        return nil
    }
    for resp.StatusCode == http.StatusSeeOther {
        return nil
    }
    for resp.StatusCode == http.StatusNotModified {
        return nil
    }
    for resp.StatusCode == http.StatusUseProxy {
        return nil
    }
    for resp.StatusCode == http.StatusTemporaryRedirect {
        return nil
    }
    for resp.StatusCode == http.StatusPermanentRedirect {
        return nil
    }
    for resp.StatusCode == http.StatusBadRequest {
        return nil
    }
    for resp.StatusCode == http.StatusUnauthorized {
        return nil
    }
    for resp.StatusCode == http.StatusPaymentRequired {
        return nil
    }
    for resp.StatusCode == http.StatusForbidden {
        return nil
    }
    for resp.StatusCode == http.StatusNotFound {
        return nil
    }
    for resp.StatusCode == http.StatusMethodNotAllowed {
        return nil
    }
    for resp.StatusCode == http.StatusNotAcceptable {
        return nil
    }
    for resp.StatusCode == http.StatusProxyAuthRequired {
        return nil
    }
    for resp.StatusCode == http.StatusRequestTimeout {
        return nil
    }
    for resp.StatusCode == http.StatusConflict {
        return nil
    }
    for resp.StatusCode == http.StatusGone {
        return nil
    }
    for resp.StatusCode == http.StatusLengthRequired {
        return nil
    }
    for resp.StatusCode == http.StatusPreconditionFailed {
        return nil
    }
    for resp.StatusCode == http.StatusRequestEntityTooLarge {
        return nil
    }
    for resp.StatusCode == http.StatusRequestURITooLong {
        return nil
    }
    for resp.StatusCode == http.StatusUnsupportedMediaType {
        return nil
    }
    for resp.StatusCode == http.StatusRequestedRangeNotSatisfiable {
        return nil
    }
    for resp.StatusCode == http.StatusExpectationFailed {
        return nil
    }
    for resp.StatusCode == http.StatusTeapot {
        return nil
    }
    for resp.StatusCode == http.StatusMisdirectedRequest {
        return nil
    }
    for resp.StatusCode == http.StatusUnprocessableEntity {
        return nil
    }
    for resp.StatusCode == http.StatusLocked {
        return nil
    }
    for resp.StatusCode == http.StatusFailedDependency {
        return nil
    }
    for resp.StatusCode == http.StatusTooEarly {
        return nil
    }
    for resp.StatusCode == http.StatusUpgradeRequired {
        return nil
    }
    for resp.StatusCode == http.StatusPreconditionRequired {
        return nil
    }
    for resp.StatusCode == http.StatusTooManyRequests {
        return nil
    }
    for resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge {
        return nil
    }
    for resp.StatusCode == http.StatusUnavailableForLegalReasons {
        return nil
    }
    for resp.StatusCode == http.StatusInternalServerError {
        return nil
    }
    for resp.StatusCode == http.StatusNotImplemented {
        return nil
    }
    for resp.StatusCode == http.StatusBadGateway {
        return nil
    }
    for resp.StatusCode == http.StatusServiceUnavailable {
        return nil
    }
    for resp.StatusCode == http.StatusGatewayTimeout {
        return nil
    }
    for resp.StatusCode == http.StatusHTTPVersionNotSupported {
        return nil
    }
    for resp.StatusCode == http.StatusVariantAlsoNegotiates {
        return nil
    }
    for resp.StatusCode == http.StatusInsufficientStorage {
        return nil
    }
    for resp.StatusCode == http.StatusLoopDetected {
        return nil
    }
    for resp.StatusCode == http.StatusNotExtended {
        return nil
    }
    for resp.StatusCode == http.StatusNetworkAuthenticationRequired {
        return nil
    }
    return nil
}

func _() {
    var w http.ResponseWriter
    http.Error(w, "", http.StatusContinue) // want `"100" can be replaced by http\.StatusContinue`
    http.Error(w, "", http.StatusSwitchingProtocols) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
    http.Error(w, "", http.StatusProcessing) // want `"102" can be replaced by http\.StatusProcessing`
    http.Error(w, "", http.StatusEarlyHints) // want `"103" can be replaced by http\.StatusEarlyHints`
    http.Error(w, "", http.StatusOK) // want `"200" can be replaced by http\.StatusOK`
    http.Error(w, "", http.StatusCreated) // want `"201" can be replaced by http\.StatusCreated`
    http.Error(w, "", http.StatusAccepted) // want `"202" can be replaced by http\.StatusAccepted`
    http.Error(w, "", http.StatusNonAuthoritativeInfo) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
    http.Error(w, "", http.StatusNoContent) // want `"204" can be replaced by http\.StatusNoContent`
    http.Error(w, "", http.StatusResetContent) // want `"205" can be replaced by http\.StatusResetContent`
    http.Error(w, "", http.StatusPartialContent) // want `"206" can be replaced by http\.StatusPartialContent`
    http.Error(w, "", http.StatusMultiStatus) // want `"207" can be replaced by http\.StatusMultiStatus`
    http.Error(w, "", http.StatusAlreadyReported) // want `"208" can be replaced by http\.StatusAlreadyReported`
    http.Error(w, "", http.StatusIMUsed) // want `"226" can be replaced by http\.StatusIMUsed`
    http.Error(w, "", http.StatusMultipleChoices) // want `"300" can be replaced by http\.StatusMultipleChoices`
    http.Error(w, "", http.StatusMovedPermanently) // want `"301" can be replaced by http\.StatusMovedPermanently`
    http.Error(w, "", http.StatusFound) // want `"302" can be replaced by http\.StatusFound`
    http.Error(w, "", http.StatusSeeOther) // want `"303" can be replaced by http\.StatusSeeOther`
    http.Error(w, "", http.StatusNotModified) // want `"304" can be replaced by http\.StatusNotModified`
    http.Error(w, "", http.StatusUseProxy) // want `"305" can be replaced by http\.StatusUseProxy`
    http.Error(w, "", http.StatusTemporaryRedirect) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
    http.Error(w, "", http.StatusPermanentRedirect) // want `"308" can be replaced by http\.StatusPermanentRedirect`
    http.Error(w, "", http.StatusBadRequest) // want `"400" can be replaced by http\.StatusBadRequest`
    http.Error(w, "", http.StatusUnauthorized) // want `"401" can be replaced by http\.StatusUnauthorized`
    http.Error(w, "", http.StatusPaymentRequired) // want `"402" can be replaced by http\.StatusPaymentRequired`
    http.Error(w, "", http.StatusForbidden) // want `"403" can be replaced by http\.StatusForbidden`
    http.Error(w, "", http.StatusNotFound) // want `"404" can be replaced by http\.StatusNotFound`
    http.Error(w, "", http.StatusMethodNotAllowed) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
    http.Error(w, "", http.StatusNotAcceptable) // want `"406" can be replaced by http\.StatusNotAcceptable`
    http.Error(w, "", http.StatusProxyAuthRequired) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
    http.Error(w, "", http.StatusRequestTimeout) // want `"408" can be replaced by http\.StatusRequestTimeout`
    http.Error(w, "", http.StatusConflict) // want `"409" can be replaced by http\.StatusConflict`
    http.Error(w, "", http.StatusGone) // want `"410" can be replaced by http\.StatusGone`
    http.Error(w, "", http.StatusLengthRequired) // want `"411" can be replaced by http\.StatusLengthRequired`
    http.Error(w, "", http.StatusPreconditionFailed) // want `"412" can be replaced by http\.StatusPreconditionFailed`
    http.Error(w, "", http.StatusRequestEntityTooLarge) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
    http.Error(w, "", http.StatusRequestURITooLong) // want `"414" can be replaced by http\.StatusRequestURITooLong`
    http.Error(w, "", http.StatusUnsupportedMediaType) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
    http.Error(w, "", http.StatusRequestedRangeNotSatisfiable) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
    http.Error(w, "", http.StatusExpectationFailed) // want `"417" can be replaced by http\.StatusExpectationFailed`
    http.Error(w, "", http.StatusTeapot) // want `"418" can be replaced by http\.StatusTeapot`
    http.Error(w, "", http.StatusMisdirectedRequest) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
    http.Error(w, "", http.StatusUnprocessableEntity) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
    http.Error(w, "", http.StatusLocked) // want `"423" can be replaced by http\.StatusLocked`
    http.Error(w, "", http.StatusFailedDependency) // want `"424" can be replaced by http\.StatusFailedDependency`
    http.Error(w, "", http.StatusTooEarly) // want `"425" can be replaced by http\.StatusTooEarly`
    http.Error(w, "", http.StatusUpgradeRequired) // want `"426" can be replaced by http\.StatusUpgradeRequired`
    http.Error(w, "", http.StatusPreconditionRequired) // want `"428" can be replaced by http\.StatusPreconditionRequired`
    http.Error(w, "", http.StatusTooManyRequests) // want `"429" can be replaced by http\.StatusTooManyRequests`
    http.Error(w, "", http.StatusRequestHeaderFieldsTooLarge) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
    http.Error(w, "", http.StatusUnavailableForLegalReasons) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
    http.Error(w, "", http.StatusInternalServerError) // want `"500" can be replaced by http\.StatusInternalServerError`
    http.Error(w, "", http.StatusNotImplemented) // want `"501" can be replaced by http\.StatusNotImplemented`
    http.Error(w, "", http.StatusBadGateway) // want `"502" can be replaced by http\.StatusBadGateway`
    http.Error(w, "", http.StatusServiceUnavailable) // want `"503" can be replaced by http\.StatusServiceUnavailable`
    http.Error(w, "", http.StatusGatewayTimeout) // want `"504" can be replaced by http\.StatusGatewayTimeout`
    http.Error(w, "", http.StatusHTTPVersionNotSupported) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
    http.Error(w, "", http.StatusVariantAlsoNegotiates) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
    http.Error(w, "", http.StatusInsufficientStorage) // want `"507" can be replaced by http\.StatusInsufficientStorage`
    http.Error(w, "", http.StatusLoopDetected) // want `"508" can be replaced by http\.StatusLoopDetected`
    http.Error(w, "", http.StatusNotExtended) // want `"510" can be replaced by http\.StatusNotExtended`
    http.Error(w, "", http.StatusNetworkAuthenticationRequired) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
}

func _() {
    var w http.ResponseWriter
    http.Error(w, "", http.StatusContinue)
    http.Error(w, "", http.StatusSwitchingProtocols)
    http.Error(w, "", http.StatusProcessing)
    http.Error(w, "", http.StatusEarlyHints)
    http.Error(w, "", http.StatusOK)
    http.Error(w, "", http.StatusCreated)
    http.Error(w, "", http.StatusAccepted)
    http.Error(w, "", http.StatusNonAuthoritativeInfo)
    http.Error(w, "", http.StatusNoContent)
    http.Error(w, "", http.StatusResetContent)
    http.Error(w, "", http.StatusPartialContent)
    http.Error(w, "", http.StatusMultiStatus)
    http.Error(w, "", http.StatusAlreadyReported)
    http.Error(w, "", http.StatusIMUsed)
    http.Error(w, "", http.StatusMultipleChoices)
    http.Error(w, "", http.StatusMovedPermanently)
    http.Error(w, "", http.StatusFound)
    http.Error(w, "", http.StatusSeeOther)
    http.Error(w, "", http.StatusNotModified)
    http.Error(w, "", http.StatusUseProxy)
    http.Error(w, "", http.StatusTemporaryRedirect)
    http.Error(w, "", http.StatusPermanentRedirect)
    http.Error(w, "", http.StatusBadRequest)
    http.Error(w, "", http.StatusUnauthorized)
    http.Error(w, "", http.StatusPaymentRequired)
    http.Error(w, "", http.StatusForbidden)
    http.Error(w, "", http.StatusNotFound)
    http.Error(w, "", http.StatusMethodNotAllowed)
    http.Error(w, "", http.StatusNotAcceptable)
    http.Error(w, "", http.StatusProxyAuthRequired)
    http.Error(w, "", http.StatusRequestTimeout)
    http.Error(w, "", http.StatusConflict)
    http.Error(w, "", http.StatusGone)
    http.Error(w, "", http.StatusLengthRequired)
    http.Error(w, "", http.StatusPreconditionFailed)
    http.Error(w, "", http.StatusRequestEntityTooLarge)
    http.Error(w, "", http.StatusRequestURITooLong)
    http.Error(w, "", http.StatusUnsupportedMediaType)
    http.Error(w, "", http.StatusRequestedRangeNotSatisfiable)
    http.Error(w, "", http.StatusExpectationFailed)
    http.Error(w, "", http.StatusTeapot)
    http.Error(w, "", http.StatusMisdirectedRequest)
    http.Error(w, "", http.StatusUnprocessableEntity)
    http.Error(w, "", http.StatusLocked)
    http.Error(w, "", http.StatusFailedDependency)
    http.Error(w, "", http.StatusTooEarly)
    http.Error(w, "", http.StatusUpgradeRequired)
    http.Error(w, "", http.StatusPreconditionRequired)
    http.Error(w, "", http.StatusTooManyRequests)
    http.Error(w, "", http.StatusRequestHeaderFieldsTooLarge)
    http.Error(w, "", http.StatusUnavailableForLegalReasons)
    http.Error(w, "", http.StatusInternalServerError)
    http.Error(w, "", http.StatusNotImplemented)
    http.Error(w, "", http.StatusBadGateway)
    http.Error(w, "", http.StatusServiceUnavailable)
    http.Error(w, "", http.StatusGatewayTimeout)
    http.Error(w, "", http.StatusHTTPVersionNotSupported)
    http.Error(w, "", http.StatusVariantAlsoNegotiates)
    http.Error(w, "", http.StatusInsufficientStorage)
    http.Error(w, "", http.StatusLoopDetected)
    http.Error(w, "", http.StatusNotExtended)
    http.Error(w, "", http.StatusNetworkAuthenticationRequired)
}

var (
    _ = http.StatusText(http.StatusContinue) // want `"100" can be replaced by http\.StatusContinue`
    _ = http.StatusText(http.StatusSwitchingProtocols) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
    _ = http.StatusText(http.StatusProcessing) // want `"102" can be replaced by http\.StatusProcessing`
    _ = http.StatusText(http.StatusEarlyHints) // want `"103" can be replaced by http\.StatusEarlyHints`
    _ = http.StatusText(http.StatusOK) // want `"200" can be replaced by http\.StatusOK`
    _ = http.StatusText(http.StatusCreated) // want `"201" can be replaced by http\.StatusCreated`
    _ = http.StatusText(http.StatusAccepted) // want `"202" can be replaced by http\.StatusAccepted`
    _ = http.StatusText(http.StatusNonAuthoritativeInfo) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
    _ = http.StatusText(http.StatusNoContent) // want `"204" can be replaced by http\.StatusNoContent`
    _ = http.StatusText(http.StatusResetContent) // want `"205" can be replaced by http\.StatusResetContent`
    _ = http.StatusText(http.StatusPartialContent) // want `"206" can be replaced by http\.StatusPartialContent`
    _ = http.StatusText(http.StatusMultiStatus) // want `"207" can be replaced by http\.StatusMultiStatus`
    _ = http.StatusText(http.StatusAlreadyReported) // want `"208" can be replaced by http\.StatusAlreadyReported`
    _ = http.StatusText(http.StatusIMUsed) // want `"226" can be replaced by http\.StatusIMUsed`
    _ = http.StatusText(http.StatusMultipleChoices) // want `"300" can be replaced by http\.StatusMultipleChoices`
    _ = http.StatusText(http.StatusMovedPermanently) // want `"301" can be replaced by http\.StatusMovedPermanently`
    _ = http.StatusText(http.StatusFound) // want `"302" can be replaced by http\.StatusFound`
    _ = http.StatusText(http.StatusSeeOther) // want `"303" can be replaced by http\.StatusSeeOther`
    _ = http.StatusText(http.StatusNotModified) // want `"304" can be replaced by http\.StatusNotModified`
    _ = http.StatusText(http.StatusUseProxy) // want `"305" can be replaced by http\.StatusUseProxy`
    _ = http.StatusText(http.StatusTemporaryRedirect) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
    _ = http.StatusText(http.StatusPermanentRedirect) // want `"308" can be replaced by http\.StatusPermanentRedirect`
    _ = http.StatusText(http.StatusBadRequest) // want `"400" can be replaced by http\.StatusBadRequest`
    _ = http.StatusText(http.StatusUnauthorized) // want `"401" can be replaced by http\.StatusUnauthorized`
    _ = http.StatusText(http.StatusPaymentRequired) // want `"402" can be replaced by http\.StatusPaymentRequired`
    _ = http.StatusText(http.StatusForbidden) // want `"403" can be replaced by http\.StatusForbidden`
    _ = http.StatusText(http.StatusNotFound) // want `"404" can be replaced by http\.StatusNotFound`
    _ = http.StatusText(http.StatusMethodNotAllowed) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
    _ = http.StatusText(http.StatusNotAcceptable) // want `"406" can be replaced by http\.StatusNotAcceptable`
    _ = http.StatusText(http.StatusProxyAuthRequired) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
    _ = http.StatusText(http.StatusRequestTimeout) // want `"408" can be replaced by http\.StatusRequestTimeout`
    _ = http.StatusText(http.StatusConflict) // want `"409" can be replaced by http\.StatusConflict`
    _ = http.StatusText(http.StatusGone) // want `"410" can be replaced by http\.StatusGone`
    _ = http.StatusText(http.StatusLengthRequired) // want `"411" can be replaced by http\.StatusLengthRequired`
    _ = http.StatusText(http.StatusPreconditionFailed) // want `"412" can be replaced by http\.StatusPreconditionFailed`
    _ = http.StatusText(http.StatusRequestEntityTooLarge) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
    _ = http.StatusText(http.StatusRequestURITooLong) // want `"414" can be replaced by http\.StatusRequestURITooLong`
    _ = http.StatusText(http.StatusUnsupportedMediaType) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
    _ = http.StatusText(http.StatusRequestedRangeNotSatisfiable) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
    _ = http.StatusText(http.StatusExpectationFailed) // want `"417" can be replaced by http\.StatusExpectationFailed`
    _ = http.StatusText(http.StatusTeapot) // want `"418" can be replaced by http\.StatusTeapot`
    _ = http.StatusText(http.StatusMisdirectedRequest) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
    _ = http.StatusText(http.StatusUnprocessableEntity) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
    _ = http.StatusText(http.StatusLocked) // want `"423" can be replaced by http\.StatusLocked`
    _ = http.StatusText(http.StatusFailedDependency) // want `"424" can be replaced by http\.StatusFailedDependency`
    _ = http.StatusText(http.StatusTooEarly) // want `"425" can be replaced by http\.StatusTooEarly`
    _ = http.StatusText(http.StatusUpgradeRequired) // want `"426" can be replaced by http\.StatusUpgradeRequired`
    _ = http.StatusText(http.StatusPreconditionRequired) // want `"428" can be replaced by http\.StatusPreconditionRequired`
    _ = http.StatusText(http.StatusTooManyRequests) // want `"429" can be replaced by http\.StatusTooManyRequests`
    _ = http.StatusText(http.StatusRequestHeaderFieldsTooLarge) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
    _ = http.StatusText(http.StatusUnavailableForLegalReasons) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
    _ = http.StatusText(http.StatusInternalServerError) // want `"500" can be replaced by http\.StatusInternalServerError`
    _ = http.StatusText(http.StatusNotImplemented) // want `"501" can be replaced by http\.StatusNotImplemented`
    _ = http.StatusText(http.StatusBadGateway) // want `"502" can be replaced by http\.StatusBadGateway`
    _ = http.StatusText(http.StatusServiceUnavailable) // want `"503" can be replaced by http\.StatusServiceUnavailable`
    _ = http.StatusText(http.StatusGatewayTimeout) // want `"504" can be replaced by http\.StatusGatewayTimeout`
    _ = http.StatusText(http.StatusHTTPVersionNotSupported) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
    _ = http.StatusText(http.StatusVariantAlsoNegotiates) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
    _ = http.StatusText(http.StatusInsufficientStorage) // want `"507" can be replaced by http\.StatusInsufficientStorage`
    _ = http.StatusText(http.StatusLoopDetected) // want `"508" can be replaced by http\.StatusLoopDetected`
    _ = http.StatusText(http.StatusNotExtended) // want `"510" can be replaced by http\.StatusNotExtended`
    _ = http.StatusText(http.StatusNetworkAuthenticationRequired) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
    _ = http.StatusText(http.StatusContinue)
    _ = http.StatusText(http.StatusSwitchingProtocols)
    _ = http.StatusText(http.StatusProcessing)
    _ = http.StatusText(http.StatusEarlyHints)
    _ = http.StatusText(http.StatusOK)
    _ = http.StatusText(http.StatusCreated)
    _ = http.StatusText(http.StatusAccepted)
    _ = http.StatusText(http.StatusNonAuthoritativeInfo)
    _ = http.StatusText(http.StatusNoContent)
    _ = http.StatusText(http.StatusResetContent)
    _ = http.StatusText(http.StatusPartialContent)
    _ = http.StatusText(http.StatusMultiStatus)
    _ = http.StatusText(http.StatusAlreadyReported)
    _ = http.StatusText(http.StatusIMUsed)
    _ = http.StatusText(http.StatusMultipleChoices)
    _ = http.StatusText(http.StatusMovedPermanently)
    _ = http.StatusText(http.StatusFound)
    _ = http.StatusText(http.StatusSeeOther)
    _ = http.StatusText(http.StatusNotModified)
    _ = http.StatusText(http.StatusUseProxy)
    _ = http.StatusText(http.StatusTemporaryRedirect)
    _ = http.StatusText(http.StatusPermanentRedirect)
    _ = http.StatusText(http.StatusBadRequest)
    _ = http.StatusText(http.StatusUnauthorized)
    _ = http.StatusText(http.StatusPaymentRequired)
    _ = http.StatusText(http.StatusForbidden)
    _ = http.StatusText(http.StatusNotFound)
    _ = http.StatusText(http.StatusMethodNotAllowed)
    _ = http.StatusText(http.StatusNotAcceptable)
    _ = http.StatusText(http.StatusProxyAuthRequired)
    _ = http.StatusText(http.StatusRequestTimeout)
    _ = http.StatusText(http.StatusConflict)
    _ = http.StatusText(http.StatusGone)
    _ = http.StatusText(http.StatusLengthRequired)
    _ = http.StatusText(http.StatusPreconditionFailed)
    _ = http.StatusText(http.StatusRequestEntityTooLarge)
    _ = http.StatusText(http.StatusRequestURITooLong)
    _ = http.StatusText(http.StatusUnsupportedMediaType)
    _ = http.StatusText(http.StatusRequestedRangeNotSatisfiable)
    _ = http.StatusText(http.StatusExpectationFailed)
    _ = http.StatusText(http.StatusTeapot)
    _ = http.StatusText(http.StatusMisdirectedRequest)
    _ = http.StatusText(http.StatusUnprocessableEntity)
    _ = http.StatusText(http.StatusLocked)
    _ = http.StatusText(http.StatusFailedDependency)
    _ = http.StatusText(http.StatusTooEarly)
    _ = http.StatusText(http.StatusUpgradeRequired)
    _ = http.StatusText(http.StatusPreconditionRequired)
    _ = http.StatusText(http.StatusTooManyRequests)
    _ = http.StatusText(http.StatusRequestHeaderFieldsTooLarge)
    _ = http.StatusText(http.StatusUnavailableForLegalReasons)
    _ = http.StatusText(http.StatusInternalServerError)
    _ = http.StatusText(http.StatusNotImplemented)
    _ = http.StatusText(http.StatusBadGateway)
    _ = http.StatusText(http.StatusServiceUnavailable)
    _ = http.StatusText(http.StatusGatewayTimeout)
    _ = http.StatusText(http.StatusHTTPVersionNotSupported)
    _ = http.StatusText(http.StatusVariantAlsoNegotiates)
    _ = http.StatusText(http.StatusInsufficientStorage)
    _ = http.StatusText(http.StatusLoopDetected)
    _ = http.StatusText(http.StatusNotExtended)
    _ = http.StatusText(http.StatusNetworkAuthenticationRequired)
)

func _() {
    var w http.ResponseWriter
    var r *http.Request
    http.Redirect(w, r, "", http.StatusContinue) // want `"100" can be replaced by http\.StatusContinue`
    http.Redirect(w, r, "", http.StatusSwitchingProtocols) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
    http.Redirect(w, r, "", http.StatusProcessing) // want `"102" can be replaced by http\.StatusProcessing`
    http.Redirect(w, r, "", http.StatusEarlyHints) // want `"103" can be replaced by http\.StatusEarlyHints`
    http.Redirect(w, r, "", http.StatusOK) // want `"200" can be replaced by http\.StatusOK`
    http.Redirect(w, r, "", http.StatusCreated) // want `"201" can be replaced by http\.StatusCreated`
    http.Redirect(w, r, "", http.StatusAccepted) // want `"202" can be replaced by http\.StatusAccepted`
    http.Redirect(w, r, "", http.StatusNonAuthoritativeInfo) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
    http.Redirect(w, r, "", http.StatusNoContent) // want `"204" can be replaced by http\.StatusNoContent`
    http.Redirect(w, r, "", http.StatusResetContent) // want `"205" can be replaced by http\.StatusResetContent`
    http.Redirect(w, r, "", http.StatusPartialContent) // want `"206" can be replaced by http\.StatusPartialContent`
    http.Redirect(w, r, "", http.StatusMultiStatus) // want `"207" can be replaced by http\.StatusMultiStatus`
    http.Redirect(w, r, "", http.StatusAlreadyReported) // want `"208" can be replaced by http\.StatusAlreadyReported`
    http.Redirect(w, r, "", http.StatusIMUsed) // want `"226" can be replaced by http\.StatusIMUsed`
    http.Redirect(w, r, "", http.StatusMultipleChoices) // want `"300" can be replaced by http\.StatusMultipleChoices`
    http.Redirect(w, r, "", http.StatusMovedPermanently) // want `"301" can be replaced by http\.StatusMovedPermanently`
    http.Redirect(w, r, "", http.StatusFound) // want `"302" can be replaced by http\.StatusFound`
    http.Redirect(w, r, "", http.StatusSeeOther) // want `"303" can be replaced by http\.StatusSeeOther`
    http.Redirect(w, r, "", http.StatusNotModified) // want `"304" can be replaced by http\.StatusNotModified`
    http.Redirect(w, r, "", http.StatusUseProxy) // want `"305" can be replaced by http\.StatusUseProxy`
    http.Redirect(w, r, "", http.StatusTemporaryRedirect) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
    http.Redirect(w, r, "", http.StatusPermanentRedirect) // want `"308" can be replaced by http\.StatusPermanentRedirect`
    http.Redirect(w, r, "", http.StatusBadRequest) // want `"400" can be replaced by http\.StatusBadRequest`
    http.Redirect(w, r, "", http.StatusUnauthorized) // want `"401" can be replaced by http\.StatusUnauthorized`
    http.Redirect(w, r, "", http.StatusPaymentRequired) // want `"402" can be replaced by http\.StatusPaymentRequired`
    http.Redirect(w, r, "", http.StatusForbidden) // want `"403" can be replaced by http\.StatusForbidden`
    http.Redirect(w, r, "", http.StatusNotFound) // want `"404" can be replaced by http\.StatusNotFound`
    http.Redirect(w, r, "", http.StatusMethodNotAllowed) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
    http.Redirect(w, r, "", http.StatusNotAcceptable) // want `"406" can be replaced by http\.StatusNotAcceptable`
    http.Redirect(w, r, "", http.StatusProxyAuthRequired) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
    http.Redirect(w, r, "", http.StatusRequestTimeout) // want `"408" can be replaced by http\.StatusRequestTimeout`
    http.Redirect(w, r, "", http.StatusConflict) // want `"409" can be replaced by http\.StatusConflict`
    http.Redirect(w, r, "", http.StatusGone) // want `"410" can be replaced by http\.StatusGone`
    http.Redirect(w, r, "", http.StatusLengthRequired) // want `"411" can be replaced by http\.StatusLengthRequired`
    http.Redirect(w, r, "", http.StatusPreconditionFailed) // want `"412" can be replaced by http\.StatusPreconditionFailed`
    http.Redirect(w, r, "", http.StatusRequestEntityTooLarge) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
    http.Redirect(w, r, "", http.StatusRequestURITooLong) // want `"414" can be replaced by http\.StatusRequestURITooLong`
    http.Redirect(w, r, "", http.StatusUnsupportedMediaType) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
    http.Redirect(w, r, "", http.StatusRequestedRangeNotSatisfiable) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
    http.Redirect(w, r, "", http.StatusExpectationFailed) // want `"417" can be replaced by http\.StatusExpectationFailed`
    http.Redirect(w, r, "", http.StatusTeapot) // want `"418" can be replaced by http\.StatusTeapot`
    http.Redirect(w, r, "", http.StatusMisdirectedRequest) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
    http.Redirect(w, r, "", http.StatusUnprocessableEntity) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
    http.Redirect(w, r, "", http.StatusLocked) // want `"423" can be replaced by http\.StatusLocked`
    http.Redirect(w, r, "", http.StatusFailedDependency) // want `"424" can be replaced by http\.StatusFailedDependency`
    http.Redirect(w, r, "", http.StatusTooEarly) // want `"425" can be replaced by http\.StatusTooEarly`
    http.Redirect(w, r, "", http.StatusUpgradeRequired) // want `"426" can be replaced by http\.StatusUpgradeRequired`
    http.Redirect(w, r, "", http.StatusPreconditionRequired) // want `"428" can be replaced by http\.StatusPreconditionRequired`
    http.Redirect(w, r, "", http.StatusTooManyRequests) // want `"429" can be replaced by http\.StatusTooManyRequests`
    http.Redirect(w, r, "", http.StatusRequestHeaderFieldsTooLarge) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
    http.Redirect(w, r, "", http.StatusUnavailableForLegalReasons) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
    http.Redirect(w, r, "", http.StatusInternalServerError) // want `"500" can be replaced by http\.StatusInternalServerError`
    http.Redirect(w, r, "", http.StatusNotImplemented) // want `"501" can be replaced by http\.StatusNotImplemented`
    http.Redirect(w, r, "", http.StatusBadGateway) // want `"502" can be replaced by http\.StatusBadGateway`
    http.Redirect(w, r, "", http.StatusServiceUnavailable) // want `"503" can be replaced by http\.StatusServiceUnavailable`
    http.Redirect(w, r, "", http.StatusGatewayTimeout) // want `"504" can be replaced by http\.StatusGatewayTimeout`
    http.Redirect(w, r, "", http.StatusHTTPVersionNotSupported) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
    http.Redirect(w, r, "", http.StatusVariantAlsoNegotiates) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
    http.Redirect(w, r, "", http.StatusInsufficientStorage) // want `"507" can be replaced by http\.StatusInsufficientStorage`
    http.Redirect(w, r, "", http.StatusLoopDetected) // want `"508" can be replaced by http\.StatusLoopDetected`
    http.Redirect(w, r, "", http.StatusNotExtended) // want `"510" can be replaced by http\.StatusNotExtended`
    http.Redirect(w, r, "", http.StatusNetworkAuthenticationRequired) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
}

func _() {
    var w http.ResponseWriter
    var r *http.Request
    http.Redirect(w, r, "", http.StatusContinue)
    http.Redirect(w, r, "", http.StatusSwitchingProtocols)
    http.Redirect(w, r, "", http.StatusProcessing)
    http.Redirect(w, r, "", http.StatusEarlyHints)
    http.Redirect(w, r, "", http.StatusOK)
    http.Redirect(w, r, "", http.StatusCreated)
    http.Redirect(w, r, "", http.StatusAccepted)
    http.Redirect(w, r, "", http.StatusNonAuthoritativeInfo)
    http.Redirect(w, r, "", http.StatusNoContent)
    http.Redirect(w, r, "", http.StatusResetContent)
    http.Redirect(w, r, "", http.StatusPartialContent)
    http.Redirect(w, r, "", http.StatusMultiStatus)
    http.Redirect(w, r, "", http.StatusAlreadyReported)
    http.Redirect(w, r, "", http.StatusIMUsed)
    http.Redirect(w, r, "", http.StatusMultipleChoices)
    http.Redirect(w, r, "", http.StatusMovedPermanently)
    http.Redirect(w, r, "", http.StatusFound)
    http.Redirect(w, r, "", http.StatusSeeOther)
    http.Redirect(w, r, "", http.StatusNotModified)
    http.Redirect(w, r, "", http.StatusUseProxy)
    http.Redirect(w, r, "", http.StatusTemporaryRedirect)
    http.Redirect(w, r, "", http.StatusPermanentRedirect)
    http.Redirect(w, r, "", http.StatusBadRequest)
    http.Redirect(w, r, "", http.StatusUnauthorized)
    http.Redirect(w, r, "", http.StatusPaymentRequired)
    http.Redirect(w, r, "", http.StatusForbidden)
    http.Redirect(w, r, "", http.StatusNotFound)
    http.Redirect(w, r, "", http.StatusMethodNotAllowed)
    http.Redirect(w, r, "", http.StatusNotAcceptable)
    http.Redirect(w, r, "", http.StatusProxyAuthRequired)
    http.Redirect(w, r, "", http.StatusRequestTimeout)
    http.Redirect(w, r, "", http.StatusConflict)
    http.Redirect(w, r, "", http.StatusGone)
    http.Redirect(w, r, "", http.StatusLengthRequired)
    http.Redirect(w, r, "", http.StatusPreconditionFailed)
    http.Redirect(w, r, "", http.StatusRequestEntityTooLarge)
    http.Redirect(w, r, "", http.StatusRequestURITooLong)
    http.Redirect(w, r, "", http.StatusUnsupportedMediaType)
    http.Redirect(w, r, "", http.StatusRequestedRangeNotSatisfiable)
    http.Redirect(w, r, "", http.StatusExpectationFailed)
    http.Redirect(w, r, "", http.StatusTeapot)
    http.Redirect(w, r, "", http.StatusMisdirectedRequest)
    http.Redirect(w, r, "", http.StatusUnprocessableEntity)
    http.Redirect(w, r, "", http.StatusLocked)
    http.Redirect(w, r, "", http.StatusFailedDependency)
    http.Redirect(w, r, "", http.StatusTooEarly)
    http.Redirect(w, r, "", http.StatusUpgradeRequired)
    http.Redirect(w, r, "", http.StatusPreconditionRequired)
    http.Redirect(w, r, "", http.StatusTooManyRequests)
    http.Redirect(w, r, "", http.StatusRequestHeaderFieldsTooLarge)
    http.Redirect(w, r, "", http.StatusUnavailableForLegalReasons)
    http.Redirect(w, r, "", http.StatusInternalServerError)
    http.Redirect(w, r, "", http.StatusNotImplemented)
    http.Redirect(w, r, "", http.StatusBadGateway)
    http.Redirect(w, r, "", http.StatusServiceUnavailable)
    http.Redirect(w, r, "", http.StatusGatewayTimeout)
    http.Redirect(w, r, "", http.StatusHTTPVersionNotSupported)
    http.Redirect(w, r, "", http.StatusVariantAlsoNegotiates)
    http.Redirect(w, r, "", http.StatusInsufficientStorage)
    http.Redirect(w, r, "", http.StatusLoopDetected)
    http.Redirect(w, r, "", http.StatusNotExtended)
    http.Redirect(w, r, "", http.StatusNetworkAuthenticationRequired)
}

var (
    _ = http.RedirectHandler("", http.StatusContinue) // want `"100" can be replaced by http\.StatusContinue`
    _ = http.RedirectHandler("", http.StatusSwitchingProtocols) // want `"101" can be replaced by http\.StatusSwitchingProtocols`
    _ = http.RedirectHandler("", http.StatusProcessing) // want `"102" can be replaced by http\.StatusProcessing`
    _ = http.RedirectHandler("", http.StatusEarlyHints) // want `"103" can be replaced by http\.StatusEarlyHints`
    _ = http.RedirectHandler("", http.StatusOK) // want `"200" can be replaced by http\.StatusOK`
    _ = http.RedirectHandler("", http.StatusCreated) // want `"201" can be replaced by http\.StatusCreated`
    _ = http.RedirectHandler("", http.StatusAccepted) // want `"202" can be replaced by http\.StatusAccepted`
    _ = http.RedirectHandler("", http.StatusNonAuthoritativeInfo) // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
    _ = http.RedirectHandler("", http.StatusNoContent) // want `"204" can be replaced by http\.StatusNoContent`
    _ = http.RedirectHandler("", http.StatusResetContent) // want `"205" can be replaced by http\.StatusResetContent`
    _ = http.RedirectHandler("", http.StatusPartialContent) // want `"206" can be replaced by http\.StatusPartialContent`
    _ = http.RedirectHandler("", http.StatusMultiStatus) // want `"207" can be replaced by http\.StatusMultiStatus`
    _ = http.RedirectHandler("", http.StatusAlreadyReported) // want `"208" can be replaced by http\.StatusAlreadyReported`
    _ = http.RedirectHandler("", http.StatusIMUsed) // want `"226" can be replaced by http\.StatusIMUsed`
    _ = http.RedirectHandler("", http.StatusMultipleChoices) // want `"300" can be replaced by http\.StatusMultipleChoices`
    _ = http.RedirectHandler("", http.StatusMovedPermanently) // want `"301" can be replaced by http\.StatusMovedPermanently`
    _ = http.RedirectHandler("", http.StatusFound) // want `"302" can be replaced by http\.StatusFound`
    _ = http.RedirectHandler("", http.StatusSeeOther) // want `"303" can be replaced by http\.StatusSeeOther`
    _ = http.RedirectHandler("", http.StatusNotModified) // want `"304" can be replaced by http\.StatusNotModified`
    _ = http.RedirectHandler("", http.StatusUseProxy) // want `"305" can be replaced by http\.StatusUseProxy`
    _ = http.RedirectHandler("", http.StatusTemporaryRedirect) // want `"307" can be replaced by http\.StatusTemporaryRedirect`
    _ = http.RedirectHandler("", http.StatusPermanentRedirect) // want `"308" can be replaced by http\.StatusPermanentRedirect`
    _ = http.RedirectHandler("", http.StatusBadRequest) // want `"400" can be replaced by http\.StatusBadRequest`
    _ = http.RedirectHandler("", http.StatusUnauthorized) // want `"401" can be replaced by http\.StatusUnauthorized`
    _ = http.RedirectHandler("", http.StatusPaymentRequired) // want `"402" can be replaced by http\.StatusPaymentRequired`
    _ = http.RedirectHandler("", http.StatusForbidden) // want `"403" can be replaced by http\.StatusForbidden`
    _ = http.RedirectHandler("", http.StatusNotFound) // want `"404" can be replaced by http\.StatusNotFound`
    _ = http.RedirectHandler("", http.StatusMethodNotAllowed) // want `"405" can be replaced by http\.StatusMethodNotAllowed`
    _ = http.RedirectHandler("", http.StatusNotAcceptable) // want `"406" can be replaced by http\.StatusNotAcceptable`
    _ = http.RedirectHandler("", http.StatusProxyAuthRequired) // want `"407" can be replaced by http\.StatusProxyAuthRequired`
    _ = http.RedirectHandler("", http.StatusRequestTimeout) // want `"408" can be replaced by http\.StatusRequestTimeout`
    _ = http.RedirectHandler("", http.StatusConflict) // want `"409" can be replaced by http\.StatusConflict`
    _ = http.RedirectHandler("", http.StatusGone) // want `"410" can be replaced by http\.StatusGone`
    _ = http.RedirectHandler("", http.StatusLengthRequired) // want `"411" can be replaced by http\.StatusLengthRequired`
    _ = http.RedirectHandler("", http.StatusPreconditionFailed) // want `"412" can be replaced by http\.StatusPreconditionFailed`
    _ = http.RedirectHandler("", http.StatusRequestEntityTooLarge) // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
    _ = http.RedirectHandler("", http.StatusRequestURITooLong) // want `"414" can be replaced by http\.StatusRequestURITooLong`
    _ = http.RedirectHandler("", http.StatusUnsupportedMediaType) // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
    _ = http.RedirectHandler("", http.StatusRequestedRangeNotSatisfiable) // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
    _ = http.RedirectHandler("", http.StatusExpectationFailed) // want `"417" can be replaced by http\.StatusExpectationFailed`
    _ = http.RedirectHandler("", http.StatusTeapot) // want `"418" can be replaced by http\.StatusTeapot`
    _ = http.RedirectHandler("", http.StatusMisdirectedRequest) // want `"421" can be replaced by http\.StatusMisdirectedRequest`
    _ = http.RedirectHandler("", http.StatusUnprocessableEntity) // want `"422" can be replaced by http\.StatusUnprocessableEntity`
    _ = http.RedirectHandler("", http.StatusLocked) // want `"423" can be replaced by http\.StatusLocked`
    _ = http.RedirectHandler("", http.StatusFailedDependency) // want `"424" can be replaced by http\.StatusFailedDependency`
    _ = http.RedirectHandler("", http.StatusTooEarly) // want `"425" can be replaced by http\.StatusTooEarly`
    _ = http.RedirectHandler("", http.StatusUpgradeRequired) // want `"426" can be replaced by http\.StatusUpgradeRequired`
    _ = http.RedirectHandler("", http.StatusPreconditionRequired) // want `"428" can be replaced by http\.StatusPreconditionRequired`
    _ = http.RedirectHandler("", http.StatusTooManyRequests) // want `"429" can be replaced by http\.StatusTooManyRequests`
    _ = http.RedirectHandler("", http.StatusRequestHeaderFieldsTooLarge) // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
    _ = http.RedirectHandler("", http.StatusUnavailableForLegalReasons) // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
    _ = http.RedirectHandler("", http.StatusInternalServerError) // want `"500" can be replaced by http\.StatusInternalServerError`
    _ = http.RedirectHandler("", http.StatusNotImplemented) // want `"501" can be replaced by http\.StatusNotImplemented`
    _ = http.RedirectHandler("", http.StatusBadGateway) // want `"502" can be replaced by http\.StatusBadGateway`
    _ = http.RedirectHandler("", http.StatusServiceUnavailable) // want `"503" can be replaced by http\.StatusServiceUnavailable`
    _ = http.RedirectHandler("", http.StatusGatewayTimeout) // want `"504" can be replaced by http\.StatusGatewayTimeout`
    _ = http.RedirectHandler("", http.StatusHTTPVersionNotSupported) // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
    _ = http.RedirectHandler("", http.StatusVariantAlsoNegotiates) // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
    _ = http.RedirectHandler("", http.StatusInsufficientStorage) // want `"507" can be replaced by http\.StatusInsufficientStorage`
    _ = http.RedirectHandler("", http.StatusLoopDetected) // want `"508" can be replaced by http\.StatusLoopDetected`
    _ = http.RedirectHandler("", http.StatusNotExtended) // want `"510" can be replaced by http\.StatusNotExtended`
    _ = http.RedirectHandler("", http.StatusNetworkAuthenticationRequired) // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
    _ = http.RedirectHandler("", http.StatusContinue)
    _ = http.RedirectHandler("", http.StatusSwitchingProtocols)
    _ = http.RedirectHandler("", http.StatusProcessing)
    _ = http.RedirectHandler("", http.StatusEarlyHints)
    _ = http.RedirectHandler("", http.StatusOK)
    _ = http.RedirectHandler("", http.StatusCreated)
    _ = http.RedirectHandler("", http.StatusAccepted)
    _ = http.RedirectHandler("", http.StatusNonAuthoritativeInfo)
    _ = http.RedirectHandler("", http.StatusNoContent)
    _ = http.RedirectHandler("", http.StatusResetContent)
    _ = http.RedirectHandler("", http.StatusPartialContent)
    _ = http.RedirectHandler("", http.StatusMultiStatus)
    _ = http.RedirectHandler("", http.StatusAlreadyReported)
    _ = http.RedirectHandler("", http.StatusIMUsed)
    _ = http.RedirectHandler("", http.StatusMultipleChoices)
    _ = http.RedirectHandler("", http.StatusMovedPermanently)
    _ = http.RedirectHandler("", http.StatusFound)
    _ = http.RedirectHandler("", http.StatusSeeOther)
    _ = http.RedirectHandler("", http.StatusNotModified)
    _ = http.RedirectHandler("", http.StatusUseProxy)
    _ = http.RedirectHandler("", http.StatusTemporaryRedirect)
    _ = http.RedirectHandler("", http.StatusPermanentRedirect)
    _ = http.RedirectHandler("", http.StatusBadRequest)
    _ = http.RedirectHandler("", http.StatusUnauthorized)
    _ = http.RedirectHandler("", http.StatusPaymentRequired)
    _ = http.RedirectHandler("", http.StatusForbidden)
    _ = http.RedirectHandler("", http.StatusNotFound)
    _ = http.RedirectHandler("", http.StatusMethodNotAllowed)
    _ = http.RedirectHandler("", http.StatusNotAcceptable)
    _ = http.RedirectHandler("", http.StatusProxyAuthRequired)
    _ = http.RedirectHandler("", http.StatusRequestTimeout)
    _ = http.RedirectHandler("", http.StatusConflict)
    _ = http.RedirectHandler("", http.StatusGone)
    _ = http.RedirectHandler("", http.StatusLengthRequired)
    _ = http.RedirectHandler("", http.StatusPreconditionFailed)
    _ = http.RedirectHandler("", http.StatusRequestEntityTooLarge)
    _ = http.RedirectHandler("", http.StatusRequestURITooLong)
    _ = http.RedirectHandler("", http.StatusUnsupportedMediaType)
    _ = http.RedirectHandler("", http.StatusRequestedRangeNotSatisfiable)
    _ = http.RedirectHandler("", http.StatusExpectationFailed)
    _ = http.RedirectHandler("", http.StatusTeapot)
    _ = http.RedirectHandler("", http.StatusMisdirectedRequest)
    _ = http.RedirectHandler("", http.StatusUnprocessableEntity)
    _ = http.RedirectHandler("", http.StatusLocked)
    _ = http.RedirectHandler("", http.StatusFailedDependency)
    _ = http.RedirectHandler("", http.StatusTooEarly)
    _ = http.RedirectHandler("", http.StatusUpgradeRequired)
    _ = http.RedirectHandler("", http.StatusPreconditionRequired)
    _ = http.RedirectHandler("", http.StatusTooManyRequests)
    _ = http.RedirectHandler("", http.StatusRequestHeaderFieldsTooLarge)
    _ = http.RedirectHandler("", http.StatusUnavailableForLegalReasons)
    _ = http.RedirectHandler("", http.StatusInternalServerError)
    _ = http.RedirectHandler("", http.StatusNotImplemented)
    _ = http.RedirectHandler("", http.StatusBadGateway)
    _ = http.RedirectHandler("", http.StatusServiceUnavailable)
    _ = http.RedirectHandler("", http.StatusGatewayTimeout)
    _ = http.RedirectHandler("", http.StatusHTTPVersionNotSupported)
    _ = http.RedirectHandler("", http.StatusVariantAlsoNegotiates)
    _ = http.RedirectHandler("", http.StatusInsufficientStorage)
    _ = http.RedirectHandler("", http.StatusLoopDetected)
    _ = http.RedirectHandler("", http.StatusNotExtended)
    _ = http.RedirectHandler("", http.StatusNetworkAuthenticationRequired)
)

func _() {
    var resp http.Response
    switch resp.StatusCode {
    case http.StatusContinue: // want `"100" can be replaced by http\.StatusContinue`
      return
    case http.StatusSwitchingProtocols: // want `"101" can be replaced by http\.StatusSwitchingProtocols`
      return
    case http.StatusProcessing: // want `"102" can be replaced by http\.StatusProcessing`
      return
    case http.StatusEarlyHints: // want `"103" can be replaced by http\.StatusEarlyHints`
      return
    case http.StatusOK: // want `"200" can be replaced by http\.StatusOK`
      return
    case http.StatusCreated: // want `"201" can be replaced by http\.StatusCreated`
      return
    case http.StatusAccepted: // want `"202" can be replaced by http\.StatusAccepted`
      return
    case http.StatusNonAuthoritativeInfo: // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
      return
    case http.StatusNoContent: // want `"204" can be replaced by http\.StatusNoContent`
      return
    case http.StatusResetContent: // want `"205" can be replaced by http\.StatusResetContent`
      return
    case http.StatusPartialContent: // want `"206" can be replaced by http\.StatusPartialContent`
      return
    case http.StatusMultiStatus: // want `"207" can be replaced by http\.StatusMultiStatus`
      return
    case http.StatusAlreadyReported: // want `"208" can be replaced by http\.StatusAlreadyReported`
      return
    case http.StatusIMUsed: // want `"226" can be replaced by http\.StatusIMUsed`
      return
    case http.StatusMultipleChoices: // want `"300" can be replaced by http\.StatusMultipleChoices`
      return
    case http.StatusMovedPermanently: // want `"301" can be replaced by http\.StatusMovedPermanently`
      return
    case http.StatusFound: // want `"302" can be replaced by http\.StatusFound`
      return
    case http.StatusSeeOther: // want `"303" can be replaced by http\.StatusSeeOther`
      return
    case http.StatusNotModified: // want `"304" can be replaced by http\.StatusNotModified`
      return
    case http.StatusUseProxy: // want `"305" can be replaced by http\.StatusUseProxy`
      return
    case http.StatusTemporaryRedirect: // want `"307" can be replaced by http\.StatusTemporaryRedirect`
      return
    case http.StatusPermanentRedirect: // want `"308" can be replaced by http\.StatusPermanentRedirect`
      return
    case http.StatusBadRequest: // want `"400" can be replaced by http\.StatusBadRequest`
      return
    case http.StatusUnauthorized: // want `"401" can be replaced by http\.StatusUnauthorized`
      return
    case http.StatusPaymentRequired: // want `"402" can be replaced by http\.StatusPaymentRequired`
      return
    case http.StatusForbidden: // want `"403" can be replaced by http\.StatusForbidden`
      return
    case http.StatusNotFound: // want `"404" can be replaced by http\.StatusNotFound`
      return
    case http.StatusMethodNotAllowed: // want `"405" can be replaced by http\.StatusMethodNotAllowed`
      return
    case http.StatusNotAcceptable: // want `"406" can be replaced by http\.StatusNotAcceptable`
      return
    case http.StatusProxyAuthRequired: // want `"407" can be replaced by http\.StatusProxyAuthRequired`
      return
    case http.StatusRequestTimeout: // want `"408" can be replaced by http\.StatusRequestTimeout`
      return
    case http.StatusConflict: // want `"409" can be replaced by http\.StatusConflict`
      return
    case http.StatusGone: // want `"410" can be replaced by http\.StatusGone`
      return
    case http.StatusLengthRequired: // want `"411" can be replaced by http\.StatusLengthRequired`
      return
    case http.StatusPreconditionFailed: // want `"412" can be replaced by http\.StatusPreconditionFailed`
      return
    case http.StatusRequestEntityTooLarge: // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
      return
    case http.StatusRequestURITooLong: // want `"414" can be replaced by http\.StatusRequestURITooLong`
      return
    case http.StatusUnsupportedMediaType: // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
      return
    case http.StatusRequestedRangeNotSatisfiable: // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
      return
    case http.StatusExpectationFailed: // want `"417" can be replaced by http\.StatusExpectationFailed`
      return
    case http.StatusTeapot: // want `"418" can be replaced by http\.StatusTeapot`
      return
    case http.StatusMisdirectedRequest: // want `"421" can be replaced by http\.StatusMisdirectedRequest`
      return
    case http.StatusUnprocessableEntity: // want `"422" can be replaced by http\.StatusUnprocessableEntity`
      return
    case http.StatusLocked: // want `"423" can be replaced by http\.StatusLocked`
      return
    case http.StatusFailedDependency: // want `"424" can be replaced by http\.StatusFailedDependency`
      return
    case http.StatusTooEarly: // want `"425" can be replaced by http\.StatusTooEarly`
      return
    case http.StatusUpgradeRequired: // want `"426" can be replaced by http\.StatusUpgradeRequired`
      return
    case http.StatusPreconditionRequired: // want `"428" can be replaced by http\.StatusPreconditionRequired`
      return
    case http.StatusTooManyRequests: // want `"429" can be replaced by http\.StatusTooManyRequests`
      return
    case http.StatusRequestHeaderFieldsTooLarge: // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
      return
    case http.StatusUnavailableForLegalReasons: // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
      return
    case http.StatusInternalServerError: // want `"500" can be replaced by http\.StatusInternalServerError`
      return
    case http.StatusNotImplemented: // want `"501" can be replaced by http\.StatusNotImplemented`
      return
    case http.StatusBadGateway: // want `"502" can be replaced by http\.StatusBadGateway`
      return
    case http.StatusServiceUnavailable: // want `"503" can be replaced by http\.StatusServiceUnavailable`
      return
    case http.StatusGatewayTimeout: // want `"504" can be replaced by http\.StatusGatewayTimeout`
      return
    case http.StatusHTTPVersionNotSupported: // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
      return
    case http.StatusVariantAlsoNegotiates: // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
      return
    case http.StatusInsufficientStorage: // want `"507" can be replaced by http\.StatusInsufficientStorage`
      return
    case http.StatusLoopDetected: // want `"508" can be replaced by http\.StatusLoopDetected`
      return
    case http.StatusNotExtended: // want `"510" can be replaced by http\.StatusNotExtended`
      return
    case http.StatusNetworkAuthenticationRequired: // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
      return
    }
}

func _() {
    var resp http.Response
    switch resp.StatusCode {
    case http.StatusContinue:
      return
    case http.StatusSwitchingProtocols:
      return
    case http.StatusProcessing:
      return
    case http.StatusEarlyHints:
      return
    case http.StatusOK:
      return
    case http.StatusCreated:
      return
    case http.StatusAccepted:
      return
    case http.StatusNonAuthoritativeInfo:
      return
    case http.StatusNoContent:
      return
    case http.StatusResetContent:
      return
    case http.StatusPartialContent:
      return
    case http.StatusMultiStatus:
      return
    case http.StatusAlreadyReported:
      return
    case http.StatusIMUsed:
      return
    case http.StatusMultipleChoices:
      return
    case http.StatusMovedPermanently:
      return
    case http.StatusFound:
      return
    case http.StatusSeeOther:
      return
    case http.StatusNotModified:
      return
    case http.StatusUseProxy:
      return
    case http.StatusTemporaryRedirect:
      return
    case http.StatusPermanentRedirect:
      return
    case http.StatusBadRequest:
      return
    case http.StatusUnauthorized:
      return
    case http.StatusPaymentRequired:
      return
    case http.StatusForbidden:
      return
    case http.StatusNotFound:
      return
    case http.StatusMethodNotAllowed:
      return
    case http.StatusNotAcceptable:
      return
    case http.StatusProxyAuthRequired:
      return
    case http.StatusRequestTimeout:
      return
    case http.StatusConflict:
      return
    case http.StatusGone:
      return
    case http.StatusLengthRequired:
      return
    case http.StatusPreconditionFailed:
      return
    case http.StatusRequestEntityTooLarge:
      return
    case http.StatusRequestURITooLong:
      return
    case http.StatusUnsupportedMediaType:
      return
    case http.StatusRequestedRangeNotSatisfiable:
      return
    case http.StatusExpectationFailed:
      return
    case http.StatusTeapot:
      return
    case http.StatusMisdirectedRequest:
      return
    case http.StatusUnprocessableEntity:
      return
    case http.StatusLocked:
      return
    case http.StatusFailedDependency:
      return
    case http.StatusTooEarly:
      return
    case http.StatusUpgradeRequired:
      return
    case http.StatusPreconditionRequired:
      return
    case http.StatusTooManyRequests:
      return
    case http.StatusRequestHeaderFieldsTooLarge:
      return
    case http.StatusUnavailableForLegalReasons:
      return
    case http.StatusInternalServerError:
      return
    case http.StatusNotImplemented:
      return
    case http.StatusBadGateway:
      return
    case http.StatusServiceUnavailable:
      return
    case http.StatusGatewayTimeout:
      return
    case http.StatusHTTPVersionNotSupported:
      return
    case http.StatusVariantAlsoNegotiates:
      return
    case http.StatusInsufficientStorage:
      return
    case http.StatusLoopDetected:
      return
    case http.StatusNotExtended:
      return
    case http.StatusNetworkAuthenticationRequired:
      return
    }
}

func _() {
    var resp http.Response
    switch {
    case resp.StatusCode == http.StatusContinue: // want `"100" can be replaced by http\.StatusContinue`
      return
    case resp.StatusCode == http.StatusSwitchingProtocols: // want `"101" can be replaced by http\.StatusSwitchingProtocols`
      return
    case resp.StatusCode == http.StatusProcessing: // want `"102" can be replaced by http\.StatusProcessing`
      return
    case resp.StatusCode == http.StatusEarlyHints: // want `"103" can be replaced by http\.StatusEarlyHints`
      return
    case resp.StatusCode == http.StatusOK: // want `"200" can be replaced by http\.StatusOK`
      return
    case resp.StatusCode == http.StatusCreated: // want `"201" can be replaced by http\.StatusCreated`
      return
    case resp.StatusCode == http.StatusAccepted: // want `"202" can be replaced by http\.StatusAccepted`
      return
    case resp.StatusCode == http.StatusNonAuthoritativeInfo: // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
      return
    case resp.StatusCode == http.StatusNoContent: // want `"204" can be replaced by http\.StatusNoContent`
      return
    case resp.StatusCode == http.StatusResetContent: // want `"205" can be replaced by http\.StatusResetContent`
      return
    case resp.StatusCode == http.StatusPartialContent: // want `"206" can be replaced by http\.StatusPartialContent`
      return
    case resp.StatusCode == http.StatusMultiStatus: // want `"207" can be replaced by http\.StatusMultiStatus`
      return
    case resp.StatusCode == http.StatusAlreadyReported: // want `"208" can be replaced by http\.StatusAlreadyReported`
      return
    case resp.StatusCode == http.StatusIMUsed: // want `"226" can be replaced by http\.StatusIMUsed`
      return
    case resp.StatusCode == http.StatusMultipleChoices: // want `"300" can be replaced by http\.StatusMultipleChoices`
      return
    case resp.StatusCode == http.StatusMovedPermanently: // want `"301" can be replaced by http\.StatusMovedPermanently`
      return
    case resp.StatusCode == http.StatusFound: // want `"302" can be replaced by http\.StatusFound`
      return
    case resp.StatusCode == http.StatusSeeOther: // want `"303" can be replaced by http\.StatusSeeOther`
      return
    case resp.StatusCode == http.StatusNotModified: // want `"304" can be replaced by http\.StatusNotModified`
      return
    case resp.StatusCode == http.StatusUseProxy: // want `"305" can be replaced by http\.StatusUseProxy`
      return
    case resp.StatusCode == http.StatusTemporaryRedirect: // want `"307" can be replaced by http\.StatusTemporaryRedirect`
      return
    case resp.StatusCode == http.StatusPermanentRedirect: // want `"308" can be replaced by http\.StatusPermanentRedirect`
      return
    case resp.StatusCode == http.StatusBadRequest: // want `"400" can be replaced by http\.StatusBadRequest`
      return
    case resp.StatusCode == http.StatusUnauthorized: // want `"401" can be replaced by http\.StatusUnauthorized`
      return
    case resp.StatusCode == http.StatusPaymentRequired: // want `"402" can be replaced by http\.StatusPaymentRequired`
      return
    case resp.StatusCode == http.StatusForbidden: // want `"403" can be replaced by http\.StatusForbidden`
      return
    case resp.StatusCode == http.StatusNotFound: // want `"404" can be replaced by http\.StatusNotFound`
      return
    case resp.StatusCode == http.StatusMethodNotAllowed: // want `"405" can be replaced by http\.StatusMethodNotAllowed`
      return
    case resp.StatusCode == http.StatusNotAcceptable: // want `"406" can be replaced by http\.StatusNotAcceptable`
      return
    case resp.StatusCode == http.StatusProxyAuthRequired: // want `"407" can be replaced by http\.StatusProxyAuthRequired`
      return
    case resp.StatusCode == http.StatusRequestTimeout: // want `"408" can be replaced by http\.StatusRequestTimeout`
      return
    case resp.StatusCode == http.StatusConflict: // want `"409" can be replaced by http\.StatusConflict`
      return
    case resp.StatusCode == http.StatusGone: // want `"410" can be replaced by http\.StatusGone`
      return
    case resp.StatusCode == http.StatusLengthRequired: // want `"411" can be replaced by http\.StatusLengthRequired`
      return
    case resp.StatusCode == http.StatusPreconditionFailed: // want `"412" can be replaced by http\.StatusPreconditionFailed`
      return
    case resp.StatusCode == http.StatusRequestEntityTooLarge: // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
      return
    case resp.StatusCode == http.StatusRequestURITooLong: // want `"414" can be replaced by http\.StatusRequestURITooLong`
      return
    case resp.StatusCode == http.StatusUnsupportedMediaType: // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
      return
    case resp.StatusCode == http.StatusRequestedRangeNotSatisfiable: // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
      return
    case resp.StatusCode == http.StatusExpectationFailed: // want `"417" can be replaced by http\.StatusExpectationFailed`
      return
    case resp.StatusCode == http.StatusTeapot: // want `"418" can be replaced by http\.StatusTeapot`
      return
    case resp.StatusCode == http.StatusMisdirectedRequest: // want `"421" can be replaced by http\.StatusMisdirectedRequest`
      return
    case resp.StatusCode == http.StatusUnprocessableEntity: // want `"422" can be replaced by http\.StatusUnprocessableEntity`
      return
    case resp.StatusCode == http.StatusLocked: // want `"423" can be replaced by http\.StatusLocked`
      return
    case resp.StatusCode == http.StatusFailedDependency: // want `"424" can be replaced by http\.StatusFailedDependency`
      return
    case resp.StatusCode == http.StatusTooEarly: // want `"425" can be replaced by http\.StatusTooEarly`
      return
    case resp.StatusCode == http.StatusUpgradeRequired: // want `"426" can be replaced by http\.StatusUpgradeRequired`
      return
    case resp.StatusCode == http.StatusPreconditionRequired: // want `"428" can be replaced by http\.StatusPreconditionRequired`
      return
    case resp.StatusCode == http.StatusTooManyRequests: // want `"429" can be replaced by http\.StatusTooManyRequests`
      return
    case resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge: // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
      return
    case resp.StatusCode == http.StatusUnavailableForLegalReasons: // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
      return
    case resp.StatusCode == http.StatusInternalServerError: // want `"500" can be replaced by http\.StatusInternalServerError`
      return
    case resp.StatusCode == http.StatusNotImplemented: // want `"501" can be replaced by http\.StatusNotImplemented`
      return
    case resp.StatusCode == http.StatusBadGateway: // want `"502" can be replaced by http\.StatusBadGateway`
      return
    case resp.StatusCode == http.StatusServiceUnavailable: // want `"503" can be replaced by http\.StatusServiceUnavailable`
      return
    case resp.StatusCode == http.StatusGatewayTimeout: // want `"504" can be replaced by http\.StatusGatewayTimeout`
      return
    case resp.StatusCode == http.StatusHTTPVersionNotSupported: // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
      return
    case resp.StatusCode == http.StatusVariantAlsoNegotiates: // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
      return
    case resp.StatusCode == http.StatusInsufficientStorage: // want `"507" can be replaced by http\.StatusInsufficientStorage`
      return
    case resp.StatusCode == http.StatusLoopDetected: // want `"508" can be replaced by http\.StatusLoopDetected`
      return
    case resp.StatusCode == http.StatusNotExtended: // want `"510" can be replaced by http\.StatusNotExtended`
      return
    case resp.StatusCode == http.StatusNetworkAuthenticationRequired: // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
      return
    }
}

func _() {
    var resp http.Response
    switch {
    case resp.StatusCode == http.StatusContinue:
      return
    case resp.StatusCode == http.StatusSwitchingProtocols:
      return
    case resp.StatusCode == http.StatusProcessing:
      return
    case resp.StatusCode == http.StatusEarlyHints:
      return
    case resp.StatusCode == http.StatusOK:
      return
    case resp.StatusCode == http.StatusCreated:
      return
    case resp.StatusCode == http.StatusAccepted:
      return
    case resp.StatusCode == http.StatusNonAuthoritativeInfo:
      return
    case resp.StatusCode == http.StatusNoContent:
      return
    case resp.StatusCode == http.StatusResetContent:
      return
    case resp.StatusCode == http.StatusPartialContent:
      return
    case resp.StatusCode == http.StatusMultiStatus:
      return
    case resp.StatusCode == http.StatusAlreadyReported:
      return
    case resp.StatusCode == http.StatusIMUsed:
      return
    case resp.StatusCode == http.StatusMultipleChoices:
      return
    case resp.StatusCode == http.StatusMovedPermanently:
      return
    case resp.StatusCode == http.StatusFound:
      return
    case resp.StatusCode == http.StatusSeeOther:
      return
    case resp.StatusCode == http.StatusNotModified:
      return
    case resp.StatusCode == http.StatusUseProxy:
      return
    case resp.StatusCode == http.StatusTemporaryRedirect:
      return
    case resp.StatusCode == http.StatusPermanentRedirect:
      return
    case resp.StatusCode == http.StatusBadRequest:
      return
    case resp.StatusCode == http.StatusUnauthorized:
      return
    case resp.StatusCode == http.StatusPaymentRequired:
      return
    case resp.StatusCode == http.StatusForbidden:
      return
    case resp.StatusCode == http.StatusNotFound:
      return
    case resp.StatusCode == http.StatusMethodNotAllowed:
      return
    case resp.StatusCode == http.StatusNotAcceptable:
      return
    case resp.StatusCode == http.StatusProxyAuthRequired:
      return
    case resp.StatusCode == http.StatusRequestTimeout:
      return
    case resp.StatusCode == http.StatusConflict:
      return
    case resp.StatusCode == http.StatusGone:
      return
    case resp.StatusCode == http.StatusLengthRequired:
      return
    case resp.StatusCode == http.StatusPreconditionFailed:
      return
    case resp.StatusCode == http.StatusRequestEntityTooLarge:
      return
    case resp.StatusCode == http.StatusRequestURITooLong:
      return
    case resp.StatusCode == http.StatusUnsupportedMediaType:
      return
    case resp.StatusCode == http.StatusRequestedRangeNotSatisfiable:
      return
    case resp.StatusCode == http.StatusExpectationFailed:
      return
    case resp.StatusCode == http.StatusTeapot:
      return
    case resp.StatusCode == http.StatusMisdirectedRequest:
      return
    case resp.StatusCode == http.StatusUnprocessableEntity:
      return
    case resp.StatusCode == http.StatusLocked:
      return
    case resp.StatusCode == http.StatusFailedDependency:
      return
    case resp.StatusCode == http.StatusTooEarly:
      return
    case resp.StatusCode == http.StatusUpgradeRequired:
      return
    case resp.StatusCode == http.StatusPreconditionRequired:
      return
    case resp.StatusCode == http.StatusTooManyRequests:
      return
    case resp.StatusCode == http.StatusRequestHeaderFieldsTooLarge:
      return
    case resp.StatusCode == http.StatusUnavailableForLegalReasons:
      return
    case resp.StatusCode == http.StatusInternalServerError:
      return
    case resp.StatusCode == http.StatusNotImplemented:
      return
    case resp.StatusCode == http.StatusBadGateway:
      return
    case resp.StatusCode == http.StatusServiceUnavailable:
      return
    case resp.StatusCode == http.StatusGatewayTimeout:
      return
    case resp.StatusCode == http.StatusHTTPVersionNotSupported:
      return
    case resp.StatusCode == http.StatusVariantAlsoNegotiates:
      return
    case resp.StatusCode == http.StatusInsufficientStorage:
      return
    case resp.StatusCode == http.StatusLoopDetected:
      return
    case resp.StatusCode == http.StatusNotExtended:
      return
    case resp.StatusCode == http.StatusNetworkAuthenticationRequired:
      return
    }
}

var (
	_ = httptest.ResponseRecorder{Code: http.StatusContinue} // want `"100" can be replaced by http\.StatusContinue`
	_ = httptest.ResponseRecorder{Code: http.StatusSwitchingProtocols} // want `"101" can be replaced by http\.StatusSwitchingProtocols`
	_ = httptest.ResponseRecorder{Code: http.StatusProcessing} // want `"102" can be replaced by http\.StatusProcessing`
	_ = httptest.ResponseRecorder{Code: http.StatusEarlyHints} // want `"103" can be replaced by http\.StatusEarlyHints`
	_ = httptest.ResponseRecorder{Code: http.StatusOK} // want `"200" can be replaced by http\.StatusOK`
	_ = httptest.ResponseRecorder{Code: http.StatusCreated} // want `"201" can be replaced by http\.StatusCreated`
	_ = httptest.ResponseRecorder{Code: http.StatusAccepted} // want `"202" can be replaced by http\.StatusAccepted`
	_ = httptest.ResponseRecorder{Code: http.StatusNonAuthoritativeInfo} // want `"203" can be replaced by http\.StatusNonAuthoritativeInfo`
	_ = httptest.ResponseRecorder{Code: http.StatusNoContent} // want `"204" can be replaced by http\.StatusNoContent`
	_ = httptest.ResponseRecorder{Code: http.StatusResetContent} // want `"205" can be replaced by http\.StatusResetContent`
	_ = httptest.ResponseRecorder{Code: http.StatusPartialContent} // want `"206" can be replaced by http\.StatusPartialContent`
	_ = httptest.ResponseRecorder{Code: http.StatusMultiStatus} // want `"207" can be replaced by http\.StatusMultiStatus`
	_ = httptest.ResponseRecorder{Code: http.StatusAlreadyReported} // want `"208" can be replaced by http\.StatusAlreadyReported`
	_ = httptest.ResponseRecorder{Code: http.StatusIMUsed} // want `"226" can be replaced by http\.StatusIMUsed`
	_ = httptest.ResponseRecorder{Code: http.StatusMultipleChoices} // want `"300" can be replaced by http\.StatusMultipleChoices`
	_ = httptest.ResponseRecorder{Code: http.StatusMovedPermanently} // want `"301" can be replaced by http\.StatusMovedPermanently`
	_ = httptest.ResponseRecorder{Code: http.StatusFound} // want `"302" can be replaced by http\.StatusFound`
	_ = httptest.ResponseRecorder{Code: http.StatusSeeOther} // want `"303" can be replaced by http\.StatusSeeOther`
	_ = httptest.ResponseRecorder{Code: http.StatusNotModified} // want `"304" can be replaced by http\.StatusNotModified`
	_ = httptest.ResponseRecorder{Code: http.StatusUseProxy} // want `"305" can be replaced by http\.StatusUseProxy`
	_ = httptest.ResponseRecorder{Code: http.StatusTemporaryRedirect} // want `"307" can be replaced by http\.StatusTemporaryRedirect`
	_ = httptest.ResponseRecorder{Code: http.StatusPermanentRedirect} // want `"308" can be replaced by http\.StatusPermanentRedirect`
	_ = httptest.ResponseRecorder{Code: http.StatusBadRequest} // want `"400" can be replaced by http\.StatusBadRequest`
	_ = httptest.ResponseRecorder{Code: http.StatusUnauthorized} // want `"401" can be replaced by http\.StatusUnauthorized`
	_ = httptest.ResponseRecorder{Code: http.StatusPaymentRequired} // want `"402" can be replaced by http\.StatusPaymentRequired`
	_ = httptest.ResponseRecorder{Code: http.StatusForbidden} // want `"403" can be replaced by http\.StatusForbidden`
	_ = httptest.ResponseRecorder{Code: http.StatusNotFound} // want `"404" can be replaced by http\.StatusNotFound`
	_ = httptest.ResponseRecorder{Code: http.StatusMethodNotAllowed} // want `"405" can be replaced by http\.StatusMethodNotAllowed`
	_ = httptest.ResponseRecorder{Code: http.StatusNotAcceptable} // want `"406" can be replaced by http\.StatusNotAcceptable`
	_ = httptest.ResponseRecorder{Code: http.StatusProxyAuthRequired} // want `"407" can be replaced by http\.StatusProxyAuthRequired`
	_ = httptest.ResponseRecorder{Code: http.StatusRequestTimeout} // want `"408" can be replaced by http\.StatusRequestTimeout`
	_ = httptest.ResponseRecorder{Code: http.StatusConflict} // want `"409" can be replaced by http\.StatusConflict`
	_ = httptest.ResponseRecorder{Code: http.StatusGone} // want `"410" can be replaced by http\.StatusGone`
	_ = httptest.ResponseRecorder{Code: http.StatusLengthRequired} // want `"411" can be replaced by http\.StatusLengthRequired`
	_ = httptest.ResponseRecorder{Code: http.StatusPreconditionFailed} // want `"412" can be replaced by http\.StatusPreconditionFailed`
	_ = httptest.ResponseRecorder{Code: http.StatusRequestEntityTooLarge} // want `"413" can be replaced by http\.StatusRequestEntityTooLarge`
	_ = httptest.ResponseRecorder{Code: http.StatusRequestURITooLong} // want `"414" can be replaced by http\.StatusRequestURITooLong`
	_ = httptest.ResponseRecorder{Code: http.StatusUnsupportedMediaType} // want `"415" can be replaced by http\.StatusUnsupportedMediaType`
	_ = httptest.ResponseRecorder{Code: http.StatusRequestedRangeNotSatisfiable} // want `"416" can be replaced by http\.StatusRequestedRangeNotSatisfiable`
	_ = httptest.ResponseRecorder{Code: http.StatusExpectationFailed} // want `"417" can be replaced by http\.StatusExpectationFailed`
	_ = httptest.ResponseRecorder{Code: http.StatusTeapot} // want `"418" can be replaced by http\.StatusTeapot`
	_ = httptest.ResponseRecorder{Code: http.StatusMisdirectedRequest} // want `"421" can be replaced by http\.StatusMisdirectedRequest`
	_ = httptest.ResponseRecorder{Code: http.StatusUnprocessableEntity} // want `"422" can be replaced by http\.StatusUnprocessableEntity`
	_ = httptest.ResponseRecorder{Code: http.StatusLocked} // want `"423" can be replaced by http\.StatusLocked`
	_ = httptest.ResponseRecorder{Code: http.StatusFailedDependency} // want `"424" can be replaced by http\.StatusFailedDependency`
	_ = httptest.ResponseRecorder{Code: http.StatusTooEarly} // want `"425" can be replaced by http\.StatusTooEarly`
	_ = httptest.ResponseRecorder{Code: http.StatusUpgradeRequired} // want `"426" can be replaced by http\.StatusUpgradeRequired`
	_ = httptest.ResponseRecorder{Code: http.StatusPreconditionRequired} // want `"428" can be replaced by http\.StatusPreconditionRequired`
	_ = httptest.ResponseRecorder{Code: http.StatusTooManyRequests} // want `"429" can be replaced by http\.StatusTooManyRequests`
	_ = httptest.ResponseRecorder{Code: http.StatusRequestHeaderFieldsTooLarge} // want `"431" can be replaced by http\.StatusRequestHeaderFieldsTooLarge`
	_ = httptest.ResponseRecorder{Code: http.StatusUnavailableForLegalReasons} // want `"451" can be replaced by http\.StatusUnavailableForLegalReasons`
	_ = httptest.ResponseRecorder{Code: http.StatusInternalServerError} // want `"500" can be replaced by http\.StatusInternalServerError`
	_ = httptest.ResponseRecorder{Code: http.StatusNotImplemented} // want `"501" can be replaced by http\.StatusNotImplemented`
	_ = httptest.ResponseRecorder{Code: http.StatusBadGateway} // want `"502" can be replaced by http\.StatusBadGateway`
	_ = httptest.ResponseRecorder{Code: http.StatusServiceUnavailable} // want `"503" can be replaced by http\.StatusServiceUnavailable`
	_ = httptest.ResponseRecorder{Code: http.StatusGatewayTimeout} // want `"504" can be replaced by http\.StatusGatewayTimeout`
	_ = httptest.ResponseRecorder{Code: http.StatusHTTPVersionNotSupported} // want `"505" can be replaced by http\.StatusHTTPVersionNotSupported`
	_ = httptest.ResponseRecorder{Code: http.StatusVariantAlsoNegotiates} // want `"506" can be replaced by http\.StatusVariantAlsoNegotiates`
	_ = httptest.ResponseRecorder{Code: http.StatusInsufficientStorage} // want `"507" can be replaced by http\.StatusInsufficientStorage`
	_ = httptest.ResponseRecorder{Code: http.StatusLoopDetected} // want `"508" can be replaced by http\.StatusLoopDetected`
	_ = httptest.ResponseRecorder{Code: http.StatusNotExtended} // want `"510" can be replaced by http\.StatusNotExtended`
	_ = httptest.ResponseRecorder{Code: http.StatusNetworkAuthenticationRequired} // want `"511" can be replaced by http\.StatusNetworkAuthenticationRequired`
)

var (
	_ = httptest.ResponseRecorder{Code: http.StatusContinue}
	_ = httptest.ResponseRecorder{Code: http.StatusSwitchingProtocols}
	_ = httptest.ResponseRecorder{Code: http.StatusProcessing}
	_ = httptest.ResponseRecorder{Code: http.StatusEarlyHints}
	_ = httptest.ResponseRecorder{Code: http.StatusOK}
	_ = httptest.ResponseRecorder{Code: http.StatusCreated}
	_ = httptest.ResponseRecorder{Code: http.StatusAccepted}
	_ = httptest.ResponseRecorder{Code: http.StatusNonAuthoritativeInfo}
	_ = httptest.ResponseRecorder{Code: http.StatusNoContent}
	_ = httptest.ResponseRecorder{Code: http.StatusResetContent}
	_ = httptest.ResponseRecorder{Code: http.StatusPartialContent}
	_ = httptest.ResponseRecorder{Code: http.StatusMultiStatus}
	_ = httptest.ResponseRecorder{Code: http.StatusAlreadyReported}
	_ = httptest.ResponseRecorder{Code: http.StatusIMUsed}
	_ = httptest.ResponseRecorder{Code: http.StatusMultipleChoices}
	_ = httptest.ResponseRecorder{Code: http.StatusMovedPermanently}
	_ = httptest.ResponseRecorder{Code: http.StatusFound}
	_ = httptest.ResponseRecorder{Code: http.StatusSeeOther}
	_ = httptest.ResponseRecorder{Code: http.StatusNotModified}
	_ = httptest.ResponseRecorder{Code: http.StatusUseProxy}
	_ = httptest.ResponseRecorder{Code: http.StatusTemporaryRedirect}
	_ = httptest.ResponseRecorder{Code: http.StatusPermanentRedirect}
	_ = httptest.ResponseRecorder{Code: http.StatusBadRequest}
	_ = httptest.ResponseRecorder{Code: http.StatusUnauthorized}
	_ = httptest.ResponseRecorder{Code: http.StatusPaymentRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusForbidden}
	_ = httptest.ResponseRecorder{Code: http.StatusNotFound}
	_ = httptest.ResponseRecorder{Code: http.StatusMethodNotAllowed}
	_ = httptest.ResponseRecorder{Code: http.StatusNotAcceptable}
	_ = httptest.ResponseRecorder{Code: http.StatusProxyAuthRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestTimeout}
	_ = httptest.ResponseRecorder{Code: http.StatusConflict}
	_ = httptest.ResponseRecorder{Code: http.StatusGone}
	_ = httptest.ResponseRecorder{Code: http.StatusLengthRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusPreconditionFailed}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestEntityTooLarge}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestURITooLong}
	_ = httptest.ResponseRecorder{Code: http.StatusUnsupportedMediaType}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestedRangeNotSatisfiable}
	_ = httptest.ResponseRecorder{Code: http.StatusExpectationFailed}
	_ = httptest.ResponseRecorder{Code: http.StatusTeapot}
	_ = httptest.ResponseRecorder{Code: http.StatusMisdirectedRequest}
	_ = httptest.ResponseRecorder{Code: http.StatusUnprocessableEntity}
	_ = httptest.ResponseRecorder{Code: http.StatusLocked}
	_ = httptest.ResponseRecorder{Code: http.StatusFailedDependency}
	_ = httptest.ResponseRecorder{Code: http.StatusTooEarly}
	_ = httptest.ResponseRecorder{Code: http.StatusUpgradeRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusPreconditionRequired}
	_ = httptest.ResponseRecorder{Code: http.StatusTooManyRequests}
	_ = httptest.ResponseRecorder{Code: http.StatusRequestHeaderFieldsTooLarge}
	_ = httptest.ResponseRecorder{Code: http.StatusUnavailableForLegalReasons}
	_ = httptest.ResponseRecorder{Code: http.StatusInternalServerError}
	_ = httptest.ResponseRecorder{Code: http.StatusNotImplemented}
	_ = httptest.ResponseRecorder{Code: http.StatusBadGateway}
	_ = httptest.ResponseRecorder{Code: http.StatusServiceUnavailable}
	_ = httptest.ResponseRecorder{Code: http.StatusGatewayTimeout}
	_ = httptest.ResponseRecorder{Code: http.StatusHTTPVersionNotSupported}
	_ = httptest.ResponseRecorder{Code: http.StatusVariantAlsoNegotiates}
	_ = httptest.ResponseRecorder{Code: http.StatusInsufficientStorage}
	_ = httptest.ResponseRecorder{Code: http.StatusLoopDetected}
	_ = httptest.ResponseRecorder{Code: http.StatusNotExtended}
	_ = httptest.ResponseRecorder{Code: http.StatusNetworkAuthenticationRequired}
)
